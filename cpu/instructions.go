// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2019-06-23 19:50:12.752392835 -0300 -03 m=+0.015637444
package cpu

// region Load/Store Instructions

// gbLDrrAA Sets Register A to the value in A
func gbLDrrAA(cpu *Core) {
	cpu.Registers.A = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAB Sets Register B to the value in A
func gbLDrrAB(cpu *Core) {
	cpu.Registers.A = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAC Sets Register C to the value in A
func gbLDrrAC(cpu *Core) {
	cpu.Registers.A = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAD Sets Register D to the value in A
func gbLDrrAD(cpu *Core) {
	cpu.Registers.A = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAE Sets Register E to the value in A
func gbLDrrAE(cpu *Core) {
	cpu.Registers.A = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAH Sets Register H to the value in A
func gbLDrrAH(cpu *Core) {
	cpu.Registers.A = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAL Sets Register L to the value in A
func gbLDrrAL(cpu *Core) {
	cpu.Registers.A = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBA Sets Register A to the value in B
func gbLDrrBA(cpu *Core) {
	cpu.Registers.B = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBB Sets Register B to the value in B
func gbLDrrBB(cpu *Core) {
	cpu.Registers.B = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBC Sets Register C to the value in B
func gbLDrrBC(cpu *Core) {
	cpu.Registers.B = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBD Sets Register D to the value in B
func gbLDrrBD(cpu *Core) {
	cpu.Registers.B = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBE Sets Register E to the value in B
func gbLDrrBE(cpu *Core) {
	cpu.Registers.B = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBH Sets Register H to the value in B
func gbLDrrBH(cpu *Core) {
	cpu.Registers.B = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBL Sets Register L to the value in B
func gbLDrrBL(cpu *Core) {
	cpu.Registers.B = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCA Sets Register A to the value in C
func gbLDrrCA(cpu *Core) {
	cpu.Registers.C = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCB Sets Register B to the value in C
func gbLDrrCB(cpu *Core) {
	cpu.Registers.C = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCC Sets Register C to the value in C
func gbLDrrCC(cpu *Core) {
	cpu.Registers.C = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCD Sets Register D to the value in C
func gbLDrrCD(cpu *Core) {
	cpu.Registers.C = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCE Sets Register E to the value in C
func gbLDrrCE(cpu *Core) {
	cpu.Registers.C = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCH Sets Register H to the value in C
func gbLDrrCH(cpu *Core) {
	cpu.Registers.C = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCL Sets Register L to the value in C
func gbLDrrCL(cpu *Core) {
	cpu.Registers.C = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDA Sets Register A to the value in D
func gbLDrrDA(cpu *Core) {
	cpu.Registers.D = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDB Sets Register B to the value in D
func gbLDrrDB(cpu *Core) {
	cpu.Registers.D = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDC Sets Register C to the value in D
func gbLDrrDC(cpu *Core) {
	cpu.Registers.D = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDD Sets Register D to the value in D
func gbLDrrDD(cpu *Core) {
	cpu.Registers.D = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDE Sets Register E to the value in D
func gbLDrrDE(cpu *Core) {
	cpu.Registers.D = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDH Sets Register H to the value in D
func gbLDrrDH(cpu *Core) {
	cpu.Registers.D = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDL Sets Register L to the value in D
func gbLDrrDL(cpu *Core) {
	cpu.Registers.D = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEA Sets Register A to the value in E
func gbLDrrEA(cpu *Core) {
	cpu.Registers.E = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEB Sets Register B to the value in E
func gbLDrrEB(cpu *Core) {
	cpu.Registers.E = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEC Sets Register C to the value in E
func gbLDrrEC(cpu *Core) {
	cpu.Registers.E = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrED Sets Register D to the value in E
func gbLDrrED(cpu *Core) {
	cpu.Registers.E = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEE Sets Register E to the value in E
func gbLDrrEE(cpu *Core) {
	cpu.Registers.E = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEH Sets Register H to the value in E
func gbLDrrEH(cpu *Core) {
	cpu.Registers.E = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEL Sets Register L to the value in E
func gbLDrrEL(cpu *Core) {
	cpu.Registers.E = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHA Sets Register A to the value in H
func gbLDrrHA(cpu *Core) {
	cpu.Registers.H = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHB Sets Register B to the value in H
func gbLDrrHB(cpu *Core) {
	cpu.Registers.H = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHC Sets Register C to the value in H
func gbLDrrHC(cpu *Core) {
	cpu.Registers.H = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHD Sets Register D to the value in H
func gbLDrrHD(cpu *Core) {
	cpu.Registers.H = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHE Sets Register E to the value in H
func gbLDrrHE(cpu *Core) {
	cpu.Registers.H = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHH Sets Register H to the value in H
func gbLDrrHH(cpu *Core) {
	cpu.Registers.H = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHL Sets Register L to the value in H
func gbLDrrHL(cpu *Core) {
	cpu.Registers.H = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLA Sets Register A to the value in L
func gbLDrrLA(cpu *Core) {
	cpu.Registers.L = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLB Sets Register B to the value in L
func gbLDrrLB(cpu *Core) {
	cpu.Registers.L = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLC Sets Register C to the value in L
func gbLDrrLC(cpu *Core) {
	cpu.Registers.L = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLD Sets Register D to the value in L
func gbLDrrLD(cpu *Core) {
	cpu.Registers.L = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLE Sets Register E to the value in L
func gbLDrrLE(cpu *Core) {
	cpu.Registers.L = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLH Sets Register H to the value in L
func gbLDrrLH(cpu *Core) {
	cpu.Registers.L = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLL Sets Register L to the value in L
func gbLDrrLL(cpu *Core) {
	cpu.Registers.L = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrHLmA Sets A to [HL]
func gbLDrHLmA(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmB Sets B to [HL]
func gbLDrHLmB(cpu *Core) {
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmC Sets C to [HL]
func gbLDrHLmC(cpu *Core) {
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmD Sets D to [HL]
func gbLDrHLmD(cpu *Core) {
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmE Sets E to [HL]
func gbLDrHLmE(cpu *Core) {
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmH Sets H to [HL]
func gbLDrHLmH(cpu *Core) {
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmL Sets L to [HL]
func gbLDrHLmL(cpu *Core) {
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrA Sets [HL] to A
func gbLDHLmrA(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrB Sets [HL] to B
func gbLDHLmrB(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrC Sets [HL] to C
func gbLDHLmrC(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrD Sets [HL] to D
func gbLDHLmrD(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrE Sets [HL] to E
func gbLDHLmrE(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrH Sets [HL] to H
func gbLDHLmrH(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrL Sets [HL] to L
func gbLDHLmrL(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnA Loads a byte from Program Memory into A. Increments PC
func gbLDrnA(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnB Loads a byte from Program Memory into B. Increments PC
func gbLDrnB(cpu *Core) {
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnC Loads a byte from Program Memory into C. Increments PC
func gbLDrnC(cpu *Core) {
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnD Loads a byte from Program Memory into D. Increments PC
func gbLDrnD(cpu *Core) {
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnE Loads a byte from Program Memory into E. Increments PC
func gbLDrnE(cpu *Core) {
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnH Loads a byte from Program Memory into H. Increments PC
func gbLDrnH(cpu *Core) {
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnL Loads a byte from Program Memory into L. Increments PC
func gbLDrnL(cpu *Core) {
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// LDHLmn Writes byte from Program Memory into Memory (H/L). Increments Program Counter
func gbLDHLmn(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Memory.ReadByte(cpu.Registers.PC))
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// LDSPnn Reads word from Program Counter and stores in SP
func gbLDSPnn(cpu *Core) {
	cpu.Registers.SP = cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// LDmmSP
func gbLDmmSP(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Memory.WriteWord(addr, cpu.Registers.SP)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 5
	cpu.Registers.LastClockT = 20
}

// LDAIOC
func gbLDAIOC(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(0xFF00 + uint16(cpu.Registers.C))
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// LDIOCA
func gbLDIOCA(cpu *Core) {
	cpu.Memory.WriteByte(0xFF00+uint16(cpu.Registers.C), cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// LDHLSPn
func gbLDHLSPn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	/*
	   if v > 127 {
	       v = -((^v + 1) & 0xFF)
	   }
	*/

	// TODO: WARNING, this probably is broken

	cpu.Registers.SetZero(false)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.SP&0xF)+v > 0xF)
	cpu.Registers.SetCarry(int(cpu.Registers.SP&0xFF)+v > 0xFF)

	v += int(cpu.Registers.SP)

	cpu.Registers.H = uint8(uint(v) >> 8)
	cpu.Registers.L = uint8(uint(v) & 0xFF)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// LDHLSPr
func gbLDHLSPr(cpu *Core) {
	cpu.Registers.SP = cpu.Registers.HL()
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLDA Sets A to [HL] and decrements HL.
func gbLDHLDA(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.A)
	cpu.Registers.L--
	if cpu.Registers.L == 255 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHLI Reads byte from [HL] into A and increments H/L
func gbLDAHLI(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHLD Reads byte from [HL] into A and decrements H/L
func gbLDAHLD(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.L--
	if cpu.Registers.L == 255 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBCmA Writes value of register A to [B << 8 + C]
func gbLDBCmA(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBDmA Writes value of register A to [B << 8 + D]
func gbLDBDmA(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBEmA Writes value of register A to [B << 8 + E]
func gbLDBEmA(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBHmA Writes value of register A to [B << 8 + H]
func gbLDBHmA(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBLmA Writes value of register A to [B << 8 + L]
func gbLDBLmA(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCBmA Writes value of register A to [C << 8 + B]
func gbLDCBmA(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCDmA Writes value of register A to [C << 8 + D]
func gbLDCDmA(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCEmA Writes value of register A to [C << 8 + E]
func gbLDCEmA(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCHmA Writes value of register A to [C << 8 + H]
func gbLDCHmA(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCLmA Writes value of register A to [C << 8 + L]
func gbLDCLmA(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDBmA Writes value of register A to [D << 8 + B]
func gbLDDBmA(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDCmA Writes value of register A to [D << 8 + C]
func gbLDDCmA(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDEmA Writes value of register A to [D << 8 + E]
func gbLDDEmA(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDHmA Writes value of register A to [D << 8 + H]
func gbLDDHmA(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDLmA Writes value of register A to [D << 8 + L]
func gbLDDLmA(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEBmA Writes value of register A to [E << 8 + B]
func gbLDEBmA(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDECmA Writes value of register A to [E << 8 + C]
func gbLDECmA(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEDmA Writes value of register A to [E << 8 + D]
func gbLDEDmA(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEHmA Writes value of register A to [E << 8 + H]
func gbLDEHmA(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDELmA Writes value of register A to [E << 8 + L]
func gbLDELmA(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHBmA Writes value of register A to [H << 8 + B]
func gbLDHBmA(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHCmA Writes value of register A to [H << 8 + C]
func gbLDHCmA(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHDmA Writes value of register A to [H << 8 + D]
func gbLDHDmA(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHEmA Writes value of register A to [H << 8 + E]
func gbLDHEmA(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmA Writes value of register A to [H << 8 + L]
func gbLDHLmA(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLBmA Writes value of register A to [L << 8 + B]
func gbLDLBmA(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLCmA Writes value of register A to [L << 8 + C]
func gbLDLCmA(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLDmA Writes value of register A to [L << 8 + D]
func gbLDLDmA(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLEmA Writes value of register A to [L << 8 + E]
func gbLDLEmA(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLHmA Writes value of register A to [L << 8 + H]
func gbLDLHmA(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDACmB Writes value of register B to [A << 8 + C]
func gbLDACmB(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDADmB Writes value of register B to [A << 8 + D]
func gbLDADmB(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAEmB Writes value of register B to [A << 8 + E]
func gbLDAEmB(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHmB Writes value of register B to [A << 8 + H]
func gbLDAHmB(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDALmB Writes value of register B to [A << 8 + L]
func gbLDALmB(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCAmB Writes value of register B to [C << 8 + A]
func gbLDCAmB(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCDmB Writes value of register B to [C << 8 + D]
func gbLDCDmB(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCEmB Writes value of register B to [C << 8 + E]
func gbLDCEmB(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCHmB Writes value of register B to [C << 8 + H]
func gbLDCHmB(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCLmB Writes value of register B to [C << 8 + L]
func gbLDCLmB(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDAmB Writes value of register B to [D << 8 + A]
func gbLDDAmB(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDCmB Writes value of register B to [D << 8 + C]
func gbLDDCmB(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDEmB Writes value of register B to [D << 8 + E]
func gbLDDEmB(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDHmB Writes value of register B to [D << 8 + H]
func gbLDDHmB(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDLmB Writes value of register B to [D << 8 + L]
func gbLDDLmB(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEAmB Writes value of register B to [E << 8 + A]
func gbLDEAmB(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDECmB Writes value of register B to [E << 8 + C]
func gbLDECmB(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEDmB Writes value of register B to [E << 8 + D]
func gbLDEDmB(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEHmB Writes value of register B to [E << 8 + H]
func gbLDEHmB(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDELmB Writes value of register B to [E << 8 + L]
func gbLDELmB(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHAmB Writes value of register B to [H << 8 + A]
func gbLDHAmB(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHCmB Writes value of register B to [H << 8 + C]
func gbLDHCmB(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHDmB Writes value of register B to [H << 8 + D]
func gbLDHDmB(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHEmB Writes value of register B to [H << 8 + E]
func gbLDHEmB(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmB Writes value of register B to [H << 8 + L]
func gbLDHLmB(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLAmB Writes value of register B to [L << 8 + A]
func gbLDLAmB(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLCmB Writes value of register B to [L << 8 + C]
func gbLDLCmB(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLDmB Writes value of register B to [L << 8 + D]
func gbLDLDmB(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLEmB Writes value of register B to [L << 8 + E]
func gbLDLEmB(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLHmB Writes value of register B to [L << 8 + H]
func gbLDLHmB(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDABmC Writes value of register C to [A << 8 + B]
func gbLDABmC(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDADmC Writes value of register C to [A << 8 + D]
func gbLDADmC(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAEmC Writes value of register C to [A << 8 + E]
func gbLDAEmC(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHmC Writes value of register C to [A << 8 + H]
func gbLDAHmC(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDALmC Writes value of register C to [A << 8 + L]
func gbLDALmC(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBAmC Writes value of register C to [B << 8 + A]
func gbLDBAmC(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBDmC Writes value of register C to [B << 8 + D]
func gbLDBDmC(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBEmC Writes value of register C to [B << 8 + E]
func gbLDBEmC(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBHmC Writes value of register C to [B << 8 + H]
func gbLDBHmC(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBLmC Writes value of register C to [B << 8 + L]
func gbLDBLmC(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDAmC Writes value of register C to [D << 8 + A]
func gbLDDAmC(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDBmC Writes value of register C to [D << 8 + B]
func gbLDDBmC(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDEmC Writes value of register C to [D << 8 + E]
func gbLDDEmC(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDHmC Writes value of register C to [D << 8 + H]
func gbLDDHmC(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDLmC Writes value of register C to [D << 8 + L]
func gbLDDLmC(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEAmC Writes value of register C to [E << 8 + A]
func gbLDEAmC(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEBmC Writes value of register C to [E << 8 + B]
func gbLDEBmC(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEDmC Writes value of register C to [E << 8 + D]
func gbLDEDmC(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEHmC Writes value of register C to [E << 8 + H]
func gbLDEHmC(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDELmC Writes value of register C to [E << 8 + L]
func gbLDELmC(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHAmC Writes value of register C to [H << 8 + A]
func gbLDHAmC(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHBmC Writes value of register C to [H << 8 + B]
func gbLDHBmC(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHDmC Writes value of register C to [H << 8 + D]
func gbLDHDmC(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHEmC Writes value of register C to [H << 8 + E]
func gbLDHEmC(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmC Writes value of register C to [H << 8 + L]
func gbLDHLmC(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLAmC Writes value of register C to [L << 8 + A]
func gbLDLAmC(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLBmC Writes value of register C to [L << 8 + B]
func gbLDLBmC(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLDmC Writes value of register C to [L << 8 + D]
func gbLDLDmC(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLEmC Writes value of register C to [L << 8 + E]
func gbLDLEmC(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLHmC Writes value of register C to [L << 8 + H]
func gbLDLHmC(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDABmD Writes value of register D to [A << 8 + B]
func gbLDABmD(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDACmD Writes value of register D to [A << 8 + C]
func gbLDACmD(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAEmD Writes value of register D to [A << 8 + E]
func gbLDAEmD(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHmD Writes value of register D to [A << 8 + H]
func gbLDAHmD(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDALmD Writes value of register D to [A << 8 + L]
func gbLDALmD(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBAmD Writes value of register D to [B << 8 + A]
func gbLDBAmD(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBCmD Writes value of register D to [B << 8 + C]
func gbLDBCmD(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBEmD Writes value of register D to [B << 8 + E]
func gbLDBEmD(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBHmD Writes value of register D to [B << 8 + H]
func gbLDBHmD(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBLmD Writes value of register D to [B << 8 + L]
func gbLDBLmD(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCAmD Writes value of register D to [C << 8 + A]
func gbLDCAmD(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCBmD Writes value of register D to [C << 8 + B]
func gbLDCBmD(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCEmD Writes value of register D to [C << 8 + E]
func gbLDCEmD(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCHmD Writes value of register D to [C << 8 + H]
func gbLDCHmD(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCLmD Writes value of register D to [C << 8 + L]
func gbLDCLmD(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEAmD Writes value of register D to [E << 8 + A]
func gbLDEAmD(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEBmD Writes value of register D to [E << 8 + B]
func gbLDEBmD(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDECmD Writes value of register D to [E << 8 + C]
func gbLDECmD(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEHmD Writes value of register D to [E << 8 + H]
func gbLDEHmD(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDELmD Writes value of register D to [E << 8 + L]
func gbLDELmD(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHAmD Writes value of register D to [H << 8 + A]
func gbLDHAmD(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHBmD Writes value of register D to [H << 8 + B]
func gbLDHBmD(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHCmD Writes value of register D to [H << 8 + C]
func gbLDHCmD(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHEmD Writes value of register D to [H << 8 + E]
func gbLDHEmD(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmD Writes value of register D to [H << 8 + L]
func gbLDHLmD(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLAmD Writes value of register D to [L << 8 + A]
func gbLDLAmD(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLBmD Writes value of register D to [L << 8 + B]
func gbLDLBmD(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLCmD Writes value of register D to [L << 8 + C]
func gbLDLCmD(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLEmD Writes value of register D to [L << 8 + E]
func gbLDLEmD(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLHmD Writes value of register D to [L << 8 + H]
func gbLDLHmD(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDABmE Writes value of register E to [A << 8 + B]
func gbLDABmE(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDACmE Writes value of register E to [A << 8 + C]
func gbLDACmE(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDADmE Writes value of register E to [A << 8 + D]
func gbLDADmE(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHmE Writes value of register E to [A << 8 + H]
func gbLDAHmE(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDALmE Writes value of register E to [A << 8 + L]
func gbLDALmE(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBAmE Writes value of register E to [B << 8 + A]
func gbLDBAmE(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBCmE Writes value of register E to [B << 8 + C]
func gbLDBCmE(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBDmE Writes value of register E to [B << 8 + D]
func gbLDBDmE(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBHmE Writes value of register E to [B << 8 + H]
func gbLDBHmE(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBLmE Writes value of register E to [B << 8 + L]
func gbLDBLmE(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCAmE Writes value of register E to [C << 8 + A]
func gbLDCAmE(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCBmE Writes value of register E to [C << 8 + B]
func gbLDCBmE(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCDmE Writes value of register E to [C << 8 + D]
func gbLDCDmE(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCHmE Writes value of register E to [C << 8 + H]
func gbLDCHmE(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCLmE Writes value of register E to [C << 8 + L]
func gbLDCLmE(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDAmE Writes value of register E to [D << 8 + A]
func gbLDDAmE(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDBmE Writes value of register E to [D << 8 + B]
func gbLDDBmE(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDCmE Writes value of register E to [D << 8 + C]
func gbLDDCmE(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDHmE Writes value of register E to [D << 8 + H]
func gbLDDHmE(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDLmE Writes value of register E to [D << 8 + L]
func gbLDDLmE(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHAmE Writes value of register E to [H << 8 + A]
func gbLDHAmE(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHBmE Writes value of register E to [H << 8 + B]
func gbLDHBmE(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHCmE Writes value of register E to [H << 8 + C]
func gbLDHCmE(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHDmE Writes value of register E to [H << 8 + D]
func gbLDHDmE(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmE Writes value of register E to [H << 8 + L]
func gbLDHLmE(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLAmE Writes value of register E to [L << 8 + A]
func gbLDLAmE(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLBmE Writes value of register E to [L << 8 + B]
func gbLDLBmE(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLCmE Writes value of register E to [L << 8 + C]
func gbLDLCmE(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLDmE Writes value of register E to [L << 8 + D]
func gbLDLDmE(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLHmE Writes value of register E to [L << 8 + H]
func gbLDLHmE(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDABmH Writes value of register H to [A << 8 + B]
func gbLDABmH(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDACmH Writes value of register H to [A << 8 + C]
func gbLDACmH(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDADmH Writes value of register H to [A << 8 + D]
func gbLDADmH(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAEmH Writes value of register H to [A << 8 + E]
func gbLDAEmH(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDALmH Writes value of register H to [A << 8 + L]
func gbLDALmH(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBAmH Writes value of register H to [B << 8 + A]
func gbLDBAmH(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBCmH Writes value of register H to [B << 8 + C]
func gbLDBCmH(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBDmH Writes value of register H to [B << 8 + D]
func gbLDBDmH(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBEmH Writes value of register H to [B << 8 + E]
func gbLDBEmH(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBLmH Writes value of register H to [B << 8 + L]
func gbLDBLmH(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCAmH Writes value of register H to [C << 8 + A]
func gbLDCAmH(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCBmH Writes value of register H to [C << 8 + B]
func gbLDCBmH(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCDmH Writes value of register H to [C << 8 + D]
func gbLDCDmH(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCEmH Writes value of register H to [C << 8 + E]
func gbLDCEmH(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCLmH Writes value of register H to [C << 8 + L]
func gbLDCLmH(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDAmH Writes value of register H to [D << 8 + A]
func gbLDDAmH(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDBmH Writes value of register H to [D << 8 + B]
func gbLDDBmH(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDCmH Writes value of register H to [D << 8 + C]
func gbLDDCmH(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDEmH Writes value of register H to [D << 8 + E]
func gbLDDEmH(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDLmH Writes value of register H to [D << 8 + L]
func gbLDDLmH(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEAmH Writes value of register H to [E << 8 + A]
func gbLDEAmH(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEBmH Writes value of register H to [E << 8 + B]
func gbLDEBmH(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDECmH Writes value of register H to [E << 8 + C]
func gbLDECmH(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEDmH Writes value of register H to [E << 8 + D]
func gbLDEDmH(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDELmH Writes value of register H to [E << 8 + L]
func gbLDELmH(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLAmH Writes value of register H to [L << 8 + A]
func gbLDLAmH(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLBmH Writes value of register H to [L << 8 + B]
func gbLDLBmH(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLCmH Writes value of register H to [L << 8 + C]
func gbLDLCmH(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLDmH Writes value of register H to [L << 8 + D]
func gbLDLDmH(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDLEmH Writes value of register H to [L << 8 + E]
func gbLDLEmH(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDABmL Writes value of register L to [A << 8 + B]
func gbLDABmL(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDACmL Writes value of register L to [A << 8 + C]
func gbLDACmL(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDADmL Writes value of register L to [A << 8 + D]
func gbLDADmL(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAEmL Writes value of register L to [A << 8 + E]
func gbLDAEmL(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHmL Writes value of register L to [A << 8 + H]
func gbLDAHmL(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBAmL Writes value of register L to [B << 8 + A]
func gbLDBAmL(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBCmL Writes value of register L to [B << 8 + C]
func gbLDBCmL(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBDmL Writes value of register L to [B << 8 + D]
func gbLDBDmL(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBEmL Writes value of register L to [B << 8 + E]
func gbLDBEmL(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBHmL Writes value of register L to [B << 8 + H]
func gbLDBHmL(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCAmL Writes value of register L to [C << 8 + A]
func gbLDCAmL(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCBmL Writes value of register L to [C << 8 + B]
func gbLDCBmL(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCDmL Writes value of register L to [C << 8 + D]
func gbLDCDmL(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCEmL Writes value of register L to [C << 8 + E]
func gbLDCEmL(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDCHmL Writes value of register L to [C << 8 + H]
func gbLDCHmL(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDAmL Writes value of register L to [D << 8 + A]
func gbLDDAmL(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDBmL Writes value of register L to [D << 8 + B]
func gbLDDBmL(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDCmL Writes value of register L to [D << 8 + C]
func gbLDDCmL(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDEmL Writes value of register L to [D << 8 + E]
func gbLDDEmL(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDHmL Writes value of register L to [D << 8 + H]
func gbLDDHmL(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEAmL Writes value of register L to [E << 8 + A]
func gbLDEAmL(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEBmL Writes value of register L to [E << 8 + B]
func gbLDEBmL(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDECmL Writes value of register L to [E << 8 + C]
func gbLDECmL(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEDmL Writes value of register L to [E << 8 + D]
func gbLDEDmL(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDEHmL Writes value of register L to [E << 8 + H]
func gbLDEHmL(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHAmL Writes value of register L to [H << 8 + A]
func gbLDHAmL(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHBmL Writes value of register L to [H << 8 + B]
func gbLDHBmL(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHCmL Writes value of register L to [H << 8 + C]
func gbLDHCmL(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHDmL Writes value of register L to [H << 8 + D]
func gbLDHDmL(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHEmL Writes value of register L to [H << 8 + E]
func gbLDHEmL(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDmmA Writes register A to memory pointed by PC
func gbLDmmA(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Memory.ReadWord(cpu.Registers.PC), cpu.Registers.A)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDmmB Writes register B to memory pointed by PC
func gbLDmmB(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Memory.ReadWord(cpu.Registers.PC), cpu.Registers.B)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDmmC Writes register C to memory pointed by PC
func gbLDmmC(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Memory.ReadWord(cpu.Registers.PC), cpu.Registers.C)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDmmD Writes register D to memory pointed by PC
func gbLDmmD(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Memory.ReadWord(cpu.Registers.PC), cpu.Registers.D)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDmmE Writes register E to memory pointed by PC
func gbLDmmE(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Memory.ReadWord(cpu.Registers.PC), cpu.Registers.E)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDmmH Writes register H to memory pointed by PC
func gbLDmmH(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Memory.ReadWord(cpu.Registers.PC), cpu.Registers.H)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDmmL Writes register L to memory pointed by PC
func gbLDmmL(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Memory.ReadWord(cpu.Registers.PC), cpu.Registers.L)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDABCm  Sets A to [B << 8 + C]
func gbLDABCm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDABDm  Sets A to [B << 8 + D]
func gbLDABDm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDABEm  Sets A to [B << 8 + E]
func gbLDABEm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDABHm  Sets A to [B << 8 + H]
func gbLDABHm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDABLm  Sets A to [B << 8 + L]
func gbLDABLm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDACBm  Sets A to [C << 8 + B]
func gbLDACBm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDACDm  Sets A to [C << 8 + D]
func gbLDACDm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDACEm  Sets A to [C << 8 + E]
func gbLDACEm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDACHm  Sets A to [C << 8 + H]
func gbLDACHm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDACLm  Sets A to [C << 8 + L]
func gbLDACLm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDADBm  Sets A to [D << 8 + B]
func gbLDADBm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDADCm  Sets A to [D << 8 + C]
func gbLDADCm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDADEm  Sets A to [D << 8 + E]
func gbLDADEm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDADHm  Sets A to [D << 8 + H]
func gbLDADHm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDADLm  Sets A to [D << 8 + L]
func gbLDADLm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAEBm  Sets A to [E << 8 + B]
func gbLDAEBm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAECm  Sets A to [E << 8 + C]
func gbLDAECm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAEDm  Sets A to [E << 8 + D]
func gbLDAEDm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAEHm  Sets A to [E << 8 + H]
func gbLDAEHm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAELm  Sets A to [E << 8 + L]
func gbLDAELm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAHBm  Sets A to [H << 8 + B]
func gbLDAHBm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAHCm  Sets A to [H << 8 + C]
func gbLDAHCm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAHDm  Sets A to [H << 8 + D]
func gbLDAHDm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAHEm  Sets A to [H << 8 + E]
func gbLDAHEm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAHLm  Sets A to [H << 8 + L]
func gbLDAHLm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDALBm  Sets A to [L << 8 + B]
func gbLDALBm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDALCm  Sets A to [L << 8 + C]
func gbLDALCm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDALDm  Sets A to [L << 8 + D]
func gbLDALDm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDALEm  Sets A to [L << 8 + E]
func gbLDALEm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDALHm  Sets A to [L << 8 + H]
func gbLDALHm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBACm  Sets B to [A << 8 + C]
func gbLDBACm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBADm  Sets B to [A << 8 + D]
func gbLDBADm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBAEm  Sets B to [A << 8 + E]
func gbLDBAEm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBAHm  Sets B to [A << 8 + H]
func gbLDBAHm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBALm  Sets B to [A << 8 + L]
func gbLDBALm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBCAm  Sets B to [C << 8 + A]
func gbLDBCAm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBCDm  Sets B to [C << 8 + D]
func gbLDBCDm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBCEm  Sets B to [C << 8 + E]
func gbLDBCEm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBCHm  Sets B to [C << 8 + H]
func gbLDBCHm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBCLm  Sets B to [C << 8 + L]
func gbLDBCLm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBDAm  Sets B to [D << 8 + A]
func gbLDBDAm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBDCm  Sets B to [D << 8 + C]
func gbLDBDCm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBDEm  Sets B to [D << 8 + E]
func gbLDBDEm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBDHm  Sets B to [D << 8 + H]
func gbLDBDHm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBDLm  Sets B to [D << 8 + L]
func gbLDBDLm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBEAm  Sets B to [E << 8 + A]
func gbLDBEAm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBECm  Sets B to [E << 8 + C]
func gbLDBECm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBEDm  Sets B to [E << 8 + D]
func gbLDBEDm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBEHm  Sets B to [E << 8 + H]
func gbLDBEHm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBELm  Sets B to [E << 8 + L]
func gbLDBELm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBHAm  Sets B to [H << 8 + A]
func gbLDBHAm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBHCm  Sets B to [H << 8 + C]
func gbLDBHCm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBHDm  Sets B to [H << 8 + D]
func gbLDBHDm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBHEm  Sets B to [H << 8 + E]
func gbLDBHEm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBHLm  Sets B to [H << 8 + L]
func gbLDBHLm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBLAm  Sets B to [L << 8 + A]
func gbLDBLAm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBLCm  Sets B to [L << 8 + C]
func gbLDBLCm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBLDm  Sets B to [L << 8 + D]
func gbLDBLDm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBLEm  Sets B to [L << 8 + E]
func gbLDBLEm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBLHm  Sets B to [L << 8 + H]
func gbLDBLHm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.B = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCABm  Sets C to [A << 8 + B]
func gbLDCABm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCADm  Sets C to [A << 8 + D]
func gbLDCADm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCAEm  Sets C to [A << 8 + E]
func gbLDCAEm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCAHm  Sets C to [A << 8 + H]
func gbLDCAHm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCALm  Sets C to [A << 8 + L]
func gbLDCALm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCBAm  Sets C to [B << 8 + A]
func gbLDCBAm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCBDm  Sets C to [B << 8 + D]
func gbLDCBDm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCBEm  Sets C to [B << 8 + E]
func gbLDCBEm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCBHm  Sets C to [B << 8 + H]
func gbLDCBHm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCBLm  Sets C to [B << 8 + L]
func gbLDCBLm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCDAm  Sets C to [D << 8 + A]
func gbLDCDAm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCDBm  Sets C to [D << 8 + B]
func gbLDCDBm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCDEm  Sets C to [D << 8 + E]
func gbLDCDEm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCDHm  Sets C to [D << 8 + H]
func gbLDCDHm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCDLm  Sets C to [D << 8 + L]
func gbLDCDLm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCEAm  Sets C to [E << 8 + A]
func gbLDCEAm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCEBm  Sets C to [E << 8 + B]
func gbLDCEBm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCEDm  Sets C to [E << 8 + D]
func gbLDCEDm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCEHm  Sets C to [E << 8 + H]
func gbLDCEHm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCELm  Sets C to [E << 8 + L]
func gbLDCELm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCHAm  Sets C to [H << 8 + A]
func gbLDCHAm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCHBm  Sets C to [H << 8 + B]
func gbLDCHBm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCHDm  Sets C to [H << 8 + D]
func gbLDCHDm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCHEm  Sets C to [H << 8 + E]
func gbLDCHEm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCHLm  Sets C to [H << 8 + L]
func gbLDCHLm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCLAm  Sets C to [L << 8 + A]
func gbLDCLAm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCLBm  Sets C to [L << 8 + B]
func gbLDCLBm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCLDm  Sets C to [L << 8 + D]
func gbLDCLDm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCLEm  Sets C to [L << 8 + E]
func gbLDCLEm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCLHm  Sets C to [L << 8 + H]
func gbLDCLHm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.C = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDABm  Sets D to [A << 8 + B]
func gbLDDABm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDACm  Sets D to [A << 8 + C]
func gbLDDACm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDAEm  Sets D to [A << 8 + E]
func gbLDDAEm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDAHm  Sets D to [A << 8 + H]
func gbLDDAHm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDALm  Sets D to [A << 8 + L]
func gbLDDALm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDBAm  Sets D to [B << 8 + A]
func gbLDDBAm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDBCm  Sets D to [B << 8 + C]
func gbLDDBCm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDBEm  Sets D to [B << 8 + E]
func gbLDDBEm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDBHm  Sets D to [B << 8 + H]
func gbLDDBHm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDBLm  Sets D to [B << 8 + L]
func gbLDDBLm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDCAm  Sets D to [C << 8 + A]
func gbLDDCAm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDCBm  Sets D to [C << 8 + B]
func gbLDDCBm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDCEm  Sets D to [C << 8 + E]
func gbLDDCEm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDCHm  Sets D to [C << 8 + H]
func gbLDDCHm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDCLm  Sets D to [C << 8 + L]
func gbLDDCLm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDEAm  Sets D to [E << 8 + A]
func gbLDDEAm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDEBm  Sets D to [E << 8 + B]
func gbLDDEBm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDECm  Sets D to [E << 8 + C]
func gbLDDECm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDEHm  Sets D to [E << 8 + H]
func gbLDDEHm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDELm  Sets D to [E << 8 + L]
func gbLDDELm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDHAm  Sets D to [H << 8 + A]
func gbLDDHAm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDHBm  Sets D to [H << 8 + B]
func gbLDDHBm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDHCm  Sets D to [H << 8 + C]
func gbLDDHCm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDHEm  Sets D to [H << 8 + E]
func gbLDDHEm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDHLm  Sets D to [H << 8 + L]
func gbLDDHLm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDLAm  Sets D to [L << 8 + A]
func gbLDDLAm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDLBm  Sets D to [L << 8 + B]
func gbLDDLBm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDLCm  Sets D to [L << 8 + C]
func gbLDDLCm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDLEm  Sets D to [L << 8 + E]
func gbLDDLEm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDLHm  Sets D to [L << 8 + H]
func gbLDDLHm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.D = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEABm  Sets E to [A << 8 + B]
func gbLDEABm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEACm  Sets E to [A << 8 + C]
func gbLDEACm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEADm  Sets E to [A << 8 + D]
func gbLDEADm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEAHm  Sets E to [A << 8 + H]
func gbLDEAHm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEALm  Sets E to [A << 8 + L]
func gbLDEALm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEBAm  Sets E to [B << 8 + A]
func gbLDEBAm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEBCm  Sets E to [B << 8 + C]
func gbLDEBCm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEBDm  Sets E to [B << 8 + D]
func gbLDEBDm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEBHm  Sets E to [B << 8 + H]
func gbLDEBHm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEBLm  Sets E to [B << 8 + L]
func gbLDEBLm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDECAm  Sets E to [C << 8 + A]
func gbLDECAm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDECBm  Sets E to [C << 8 + B]
func gbLDECBm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDECDm  Sets E to [C << 8 + D]
func gbLDECDm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDECHm  Sets E to [C << 8 + H]
func gbLDECHm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDECLm  Sets E to [C << 8 + L]
func gbLDECLm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEDAm  Sets E to [D << 8 + A]
func gbLDEDAm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEDBm  Sets E to [D << 8 + B]
func gbLDEDBm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEDCm  Sets E to [D << 8 + C]
func gbLDEDCm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEDHm  Sets E to [D << 8 + H]
func gbLDEDHm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEDLm  Sets E to [D << 8 + L]
func gbLDEDLm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEHAm  Sets E to [H << 8 + A]
func gbLDEHAm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEHBm  Sets E to [H << 8 + B]
func gbLDEHBm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEHCm  Sets E to [H << 8 + C]
func gbLDEHCm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEHDm  Sets E to [H << 8 + D]
func gbLDEHDm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEHLm  Sets E to [H << 8 + L]
func gbLDEHLm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDELAm  Sets E to [L << 8 + A]
func gbLDELAm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDELBm  Sets E to [L << 8 + B]
func gbLDELBm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDELCm  Sets E to [L << 8 + C]
func gbLDELCm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDELDm  Sets E to [L << 8 + D]
func gbLDELDm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDELHm  Sets E to [L << 8 + H]
func gbLDELHm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.E = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHABm  Sets H to [A << 8 + B]
func gbLDHABm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHACm  Sets H to [A << 8 + C]
func gbLDHACm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHADm  Sets H to [A << 8 + D]
func gbLDHADm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHAEm  Sets H to [A << 8 + E]
func gbLDHAEm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHALm  Sets H to [A << 8 + L]
func gbLDHALm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHBAm  Sets H to [B << 8 + A]
func gbLDHBAm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHBCm  Sets H to [B << 8 + C]
func gbLDHBCm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHBDm  Sets H to [B << 8 + D]
func gbLDHBDm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHBEm  Sets H to [B << 8 + E]
func gbLDHBEm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHBLm  Sets H to [B << 8 + L]
func gbLDHBLm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHCAm  Sets H to [C << 8 + A]
func gbLDHCAm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHCBm  Sets H to [C << 8 + B]
func gbLDHCBm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHCDm  Sets H to [C << 8 + D]
func gbLDHCDm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHCEm  Sets H to [C << 8 + E]
func gbLDHCEm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHCLm  Sets H to [C << 8 + L]
func gbLDHCLm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHDAm  Sets H to [D << 8 + A]
func gbLDHDAm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHDBm  Sets H to [D << 8 + B]
func gbLDHDBm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHDCm  Sets H to [D << 8 + C]
func gbLDHDCm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHDEm  Sets H to [D << 8 + E]
func gbLDHDEm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHDLm  Sets H to [D << 8 + L]
func gbLDHDLm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHEAm  Sets H to [E << 8 + A]
func gbLDHEAm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHEBm  Sets H to [E << 8 + B]
func gbLDHEBm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHECm  Sets H to [E << 8 + C]
func gbLDHECm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHEDm  Sets H to [E << 8 + D]
func gbLDHEDm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHELm  Sets H to [E << 8 + L]
func gbLDHELm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.L)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHLAm  Sets H to [L << 8 + A]
func gbLDHLAm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHLBm  Sets H to [L << 8 + B]
func gbLDHLBm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHLCm  Sets H to [L << 8 + C]
func gbLDHLCm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHLDm  Sets H to [L << 8 + D]
func gbLDHLDm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHLEm  Sets H to [L << 8 + E]
func gbLDHLEm(cpu *Core) {
	hl := (uint16(cpu.Registers.L) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.H = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLABm  Sets L to [A << 8 + B]
func gbLDLABm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLACm  Sets L to [A << 8 + C]
func gbLDLACm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLADm  Sets L to [A << 8 + D]
func gbLDLADm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLAEm  Sets L to [A << 8 + E]
func gbLDLAEm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLAHm  Sets L to [A << 8 + H]
func gbLDLAHm(cpu *Core) {
	hl := (uint16(cpu.Registers.A) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLBAm  Sets L to [B << 8 + A]
func gbLDLBAm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLBCm  Sets L to [B << 8 + C]
func gbLDLBCm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLBDm  Sets L to [B << 8 + D]
func gbLDLBDm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLBEm  Sets L to [B << 8 + E]
func gbLDLBEm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLBHm  Sets L to [B << 8 + H]
func gbLDLBHm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLCAm  Sets L to [C << 8 + A]
func gbLDLCAm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLCBm  Sets L to [C << 8 + B]
func gbLDLCBm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLCDm  Sets L to [C << 8 + D]
func gbLDLCDm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLCEm  Sets L to [C << 8 + E]
func gbLDLCEm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLCHm  Sets L to [C << 8 + H]
func gbLDLCHm(cpu *Core) {
	hl := (uint16(cpu.Registers.C) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLDAm  Sets L to [D << 8 + A]
func gbLDLDAm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLDBm  Sets L to [D << 8 + B]
func gbLDLDBm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLDCm  Sets L to [D << 8 + C]
func gbLDLDCm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLDEm  Sets L to [D << 8 + E]
func gbLDLDEm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLDHm  Sets L to [D << 8 + H]
func gbLDLDHm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLEAm  Sets L to [E << 8 + A]
func gbLDLEAm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLEBm  Sets L to [E << 8 + B]
func gbLDLEBm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLECm  Sets L to [E << 8 + C]
func gbLDLECm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLEDm  Sets L to [E << 8 + D]
func gbLDLEDm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLEHm  Sets L to [E << 8 + H]
func gbLDLEHm(cpu *Core) {
	hl := (uint16(cpu.Registers.E) << 8) + uint16(cpu.Registers.H)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLHAm  Sets L to [H << 8 + A]
func gbLDLHAm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.A)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLHBm  Sets L to [H << 8 + B]
func gbLDLHBm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.B)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLHCm  Sets L to [H << 8 + C]
func gbLDLHCm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLHDm  Sets L to [H << 8 + D]
func gbLDLHDm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.D)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLHEm  Sets L to [H << 8 + E]
func gbLDLHEm(cpu *Core) {
	hl := (uint16(cpu.Registers.H) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.L = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDAmm Writes register A to memory pointed by PC
func gbLDAmm(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.A = cpu.Memory.ReadByte(addr)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDBmm Writes register B to memory pointed by PC
func gbLDBmm(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.B = cpu.Memory.ReadByte(addr)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDCmm Writes register C to memory pointed by PC
func gbLDCmm(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.C = cpu.Memory.ReadByte(addr)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDDmm Writes register D to memory pointed by PC
func gbLDDmm(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.D = cpu.Memory.ReadByte(addr)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDEmm Writes register E to memory pointed by PC
func gbLDEmm(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.E = cpu.Memory.ReadByte(addr)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHmm Writes register H to memory pointed by PC
func gbLDHmm(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.H = cpu.Memory.ReadByte(addr)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDLmm Writes register L to memory pointed by PC
func gbLDLmm(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.L = cpu.Memory.ReadByte(addr)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDABnn Reads [PC] to B and [PC+1] to A
func gbLDABnn(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDACnn Reads [PC] to C and [PC+1] to A
func gbLDACnn(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDADnn Reads [PC] to D and [PC+1] to A
func gbLDADnn(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDAEnn Reads [PC] to E and [PC+1] to A
func gbLDAEnn(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDAHnn Reads [PC] to H and [PC+1] to A
func gbLDAHnn(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDALnn Reads [PC] to L and [PC+1] to A
func gbLDALnn(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDBAnn Reads [PC] to A and [PC+1] to B
func gbLDBAnn(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDBCnn Reads [PC] to C and [PC+1] to B
func gbLDBCnn(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDBDnn Reads [PC] to D and [PC+1] to B
func gbLDBDnn(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDBEnn Reads [PC] to E and [PC+1] to B
func gbLDBEnn(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDBHnn Reads [PC] to H and [PC+1] to B
func gbLDBHnn(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDBLnn Reads [PC] to L and [PC+1] to B
func gbLDBLnn(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDCAnn Reads [PC] to A and [PC+1] to C
func gbLDCAnn(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDCBnn Reads [PC] to B and [PC+1] to C
func gbLDCBnn(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDCDnn Reads [PC] to D and [PC+1] to C
func gbLDCDnn(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDCEnn Reads [PC] to E and [PC+1] to C
func gbLDCEnn(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDCHnn Reads [PC] to H and [PC+1] to C
func gbLDCHnn(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDCLnn Reads [PC] to L and [PC+1] to C
func gbLDCLnn(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDDAnn Reads [PC] to A and [PC+1] to D
func gbLDDAnn(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDDBnn Reads [PC] to B and [PC+1] to D
func gbLDDBnn(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDDCnn Reads [PC] to C and [PC+1] to D
func gbLDDCnn(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDDEnn Reads [PC] to E and [PC+1] to D
func gbLDDEnn(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDDHnn Reads [PC] to H and [PC+1] to D
func gbLDDHnn(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDDLnn Reads [PC] to L and [PC+1] to D
func gbLDDLnn(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDEAnn Reads [PC] to A and [PC+1] to E
func gbLDEAnn(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDEBnn Reads [PC] to B and [PC+1] to E
func gbLDEBnn(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDECnn Reads [PC] to C and [PC+1] to E
func gbLDECnn(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDEDnn Reads [PC] to D and [PC+1] to E
func gbLDEDnn(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDEHnn Reads [PC] to H and [PC+1] to E
func gbLDEHnn(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDELnn Reads [PC] to L and [PC+1] to E
func gbLDELnn(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHAnn Reads [PC] to A and [PC+1] to H
func gbLDHAnn(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHBnn Reads [PC] to B and [PC+1] to H
func gbLDHBnn(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHCnn Reads [PC] to C and [PC+1] to H
func gbLDHCnn(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHDnn Reads [PC] to D and [PC+1] to H
func gbLDHDnn(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHEnn Reads [PC] to E and [PC+1] to H
func gbLDHEnn(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHLnn Reads [PC] to L and [PC+1] to H
func gbLDHLnn(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDLAnn Reads [PC] to A and [PC+1] to L
func gbLDLAnn(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDLBnn Reads [PC] to B and [PC+1] to L
func gbLDLBnn(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDLCnn Reads [PC] to C and [PC+1] to L
func gbLDLCnn(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDLDnn Reads [PC] to D and [PC+1] to L
func gbLDLDnn(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDLEnn Reads [PC] to E and [PC+1] to L
func gbLDLEnn(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDLHnn Reads [PC] to H and [PC+1] to L
func gbLDLHnn(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHLIA Sets A to [HL] and increments HL.
func gbLDHLIA(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.A)
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLIB Sets B to [HL] and increments HL.
func gbLDHLIB(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.B)
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLIC Sets C to [HL] and increments HL.
func gbLDHLIC(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.C)
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLID Sets D to [HL] and increments HL.
func gbLDHLID(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.D)
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLIE Sets E to [HL] and increments HL.
func gbLDHLIE(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.E)
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLIH Sets H to [HL] and increments HL.
func gbLDHLIH(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.H)
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLIL Sets L to [HL] and increments HL.
func gbLDHLIL(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.L)
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAIOn
func gbLDAIOn(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.A = cpu.Memory.ReadByte(0xFF00 + uint16(addr))

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDIOnA
func gbLDIOnA(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Memory.WriteByte(0xFF00+uint16(addr), cpu.Registers.A)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDBIOn
func gbLDBIOn(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.B = cpu.Memory.ReadByte(0xFF00 + uint16(addr))

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDIOnB
func gbLDIOnB(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Memory.WriteByte(0xFF00+uint16(addr), cpu.Registers.B)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDCIOn
func gbLDCIOn(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.C = cpu.Memory.ReadByte(0xFF00 + uint16(addr))

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDIOnC
func gbLDIOnC(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Memory.WriteByte(0xFF00+uint16(addr), cpu.Registers.C)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDDIOn
func gbLDDIOn(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.D = cpu.Memory.ReadByte(0xFF00 + uint16(addr))

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDIOnD
func gbLDIOnD(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Memory.WriteByte(0xFF00+uint16(addr), cpu.Registers.D)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDEIOn
func gbLDEIOn(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.E = cpu.Memory.ReadByte(0xFF00 + uint16(addr))

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDIOnE
func gbLDIOnE(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Memory.WriteByte(0xFF00+uint16(addr), cpu.Registers.E)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHIOn
func gbLDHIOn(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.H = cpu.Memory.ReadByte(0xFF00 + uint16(addr))

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDIOnH
func gbLDIOnH(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Memory.WriteByte(0xFF00+uint16(addr), cpu.Registers.H)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDLIOn
func gbLDLIOn(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.L = cpu.Memory.ReadByte(0xFF00 + uint16(addr))

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDIOnL
func gbLDIOnL(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Memory.WriteByte(0xFF00+uint16(addr), cpu.Registers.L)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// endregion
// region Data Processing Instructions

// gbADDrA Adds A to A
func gbADDrA(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.A)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.A&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrA Sets A to A + A + FlagCarry
func gbADCrA(cpu *Core) {
	b := int(cpu.Registers.A)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrB Adds B to A
func gbADDrB(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.B)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.B&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrB Sets A to A + B + FlagCarry
func gbADCrB(cpu *Core) {
	b := int(cpu.Registers.B)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrC Adds C to A
func gbADDrC(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.C)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.C&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrC Sets A to A + C + FlagCarry
func gbADCrC(cpu *Core) {
	b := int(cpu.Registers.C)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrD Adds D to A
func gbADDrD(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.D)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.D&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrD Sets A to A + D + FlagCarry
func gbADCrD(cpu *Core) {
	b := int(cpu.Registers.D)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrE Adds E to A
func gbADDrE(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.E)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.E&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrE Sets A to A + E + FlagCarry
func gbADCrE(cpu *Core) {
	b := int(cpu.Registers.E)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrH Adds H to A
func gbADDrH(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.H)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.H&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrH Sets A to A + H + FlagCarry
func gbADCrH(cpu *Core) {
	b := int(cpu.Registers.H)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrL Adds L to A
func gbADDrL(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.L)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.L&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrL Sets A to A + L + FlagCarry
func gbADCrL(cpu *Core) {
	b := int(cpu.Registers.L)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDHLAB Adds (A << 8) + B to HL
func gbADDHLAB(cpu *Core) {
	AB := uint16(cpu.Registers.A)<<8 + uint16(cpu.Registers.B)
	sum := AB + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((AB & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLAC Adds (A << 8) + C to HL
func gbADDHLAC(cpu *Core) {
	AC := uint16(cpu.Registers.A)<<8 + uint16(cpu.Registers.C)
	sum := AC + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((AC & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLAD Adds (A << 8) + D to HL
func gbADDHLAD(cpu *Core) {
	AD := uint16(cpu.Registers.A)<<8 + uint16(cpu.Registers.D)
	sum := AD + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((AD & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLAE Adds (A << 8) + E to HL
func gbADDHLAE(cpu *Core) {
	AE := uint16(cpu.Registers.A)<<8 + uint16(cpu.Registers.E)
	sum := AE + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((AE & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLAH Adds (A << 8) + H to HL
func gbADDHLAH(cpu *Core) {
	AH := uint16(cpu.Registers.A)<<8 + uint16(cpu.Registers.H)
	sum := AH + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((AH & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLAL Adds (A << 8) + L to HL
func gbADDHLAL(cpu *Core) {
	AL := uint16(cpu.Registers.A)<<8 + uint16(cpu.Registers.L)
	sum := AL + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((AL & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLBA Adds (B << 8) + A to HL
func gbADDHLBA(cpu *Core) {
	BA := uint16(cpu.Registers.B)<<8 + uint16(cpu.Registers.A)
	sum := BA + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((BA & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLBC Adds (B << 8) + C to HL
func gbADDHLBC(cpu *Core) {
	BC := uint16(cpu.Registers.B)<<8 + uint16(cpu.Registers.C)
	sum := BC + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((BC & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLBD Adds (B << 8) + D to HL
func gbADDHLBD(cpu *Core) {
	BD := uint16(cpu.Registers.B)<<8 + uint16(cpu.Registers.D)
	sum := BD + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((BD & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLBE Adds (B << 8) + E to HL
func gbADDHLBE(cpu *Core) {
	BE := uint16(cpu.Registers.B)<<8 + uint16(cpu.Registers.E)
	sum := BE + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((BE & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLBH Adds (B << 8) + H to HL
func gbADDHLBH(cpu *Core) {
	BH := uint16(cpu.Registers.B)<<8 + uint16(cpu.Registers.H)
	sum := BH + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((BH & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLBL Adds (B << 8) + L to HL
func gbADDHLBL(cpu *Core) {
	BL := uint16(cpu.Registers.B)<<8 + uint16(cpu.Registers.L)
	sum := BL + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((BL & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLCA Adds (C << 8) + A to HL
func gbADDHLCA(cpu *Core) {
	CA := uint16(cpu.Registers.C)<<8 + uint16(cpu.Registers.A)
	sum := CA + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((CA & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLCB Adds (C << 8) + B to HL
func gbADDHLCB(cpu *Core) {
	CB := uint16(cpu.Registers.C)<<8 + uint16(cpu.Registers.B)
	sum := CB + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((CB & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLCD Adds (C << 8) + D to HL
func gbADDHLCD(cpu *Core) {
	CD := uint16(cpu.Registers.C)<<8 + uint16(cpu.Registers.D)
	sum := CD + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((CD & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLCE Adds (C << 8) + E to HL
func gbADDHLCE(cpu *Core) {
	CE := uint16(cpu.Registers.C)<<8 + uint16(cpu.Registers.E)
	sum := CE + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((CE & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLCH Adds (C << 8) + H to HL
func gbADDHLCH(cpu *Core) {
	CH := uint16(cpu.Registers.C)<<8 + uint16(cpu.Registers.H)
	sum := CH + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((CH & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLCL Adds (C << 8) + L to HL
func gbADDHLCL(cpu *Core) {
	CL := uint16(cpu.Registers.C)<<8 + uint16(cpu.Registers.L)
	sum := CL + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((CL & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLDA Adds (D << 8) + A to HL
func gbADDHLDA(cpu *Core) {
	DA := uint16(cpu.Registers.D)<<8 + uint16(cpu.Registers.A)
	sum := DA + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((DA & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLDB Adds (D << 8) + B to HL
func gbADDHLDB(cpu *Core) {
	DB := uint16(cpu.Registers.D)<<8 + uint16(cpu.Registers.B)
	sum := DB + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((DB & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLDC Adds (D << 8) + C to HL
func gbADDHLDC(cpu *Core) {
	DC := uint16(cpu.Registers.D)<<8 + uint16(cpu.Registers.C)
	sum := DC + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((DC & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLDE Adds (D << 8) + E to HL
func gbADDHLDE(cpu *Core) {
	DE := uint16(cpu.Registers.D)<<8 + uint16(cpu.Registers.E)
	sum := DE + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((DE & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLDH Adds (D << 8) + H to HL
func gbADDHLDH(cpu *Core) {
	DH := uint16(cpu.Registers.D)<<8 + uint16(cpu.Registers.H)
	sum := DH + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((DH & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLDL Adds (D << 8) + L to HL
func gbADDHLDL(cpu *Core) {
	DL := uint16(cpu.Registers.D)<<8 + uint16(cpu.Registers.L)
	sum := DL + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((DL & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLEA Adds (E << 8) + A to HL
func gbADDHLEA(cpu *Core) {
	EA := uint16(cpu.Registers.E)<<8 + uint16(cpu.Registers.A)
	sum := EA + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((EA & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLEB Adds (E << 8) + B to HL
func gbADDHLEB(cpu *Core) {
	EB := uint16(cpu.Registers.E)<<8 + uint16(cpu.Registers.B)
	sum := EB + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((EB & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLEC Adds (E << 8) + C to HL
func gbADDHLEC(cpu *Core) {
	EC := uint16(cpu.Registers.E)<<8 + uint16(cpu.Registers.C)
	sum := EC + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((EC & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLED Adds (E << 8) + D to HL
func gbADDHLED(cpu *Core) {
	ED := uint16(cpu.Registers.E)<<8 + uint16(cpu.Registers.D)
	sum := ED + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((ED & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLEH Adds (E << 8) + H to HL
func gbADDHLEH(cpu *Core) {
	EH := uint16(cpu.Registers.E)<<8 + uint16(cpu.Registers.H)
	sum := EH + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((EH & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLEL Adds (E << 8) + L to HL
func gbADDHLEL(cpu *Core) {
	EL := uint16(cpu.Registers.E)<<8 + uint16(cpu.Registers.L)
	sum := EL + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((EL & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLHA Adds (H << 8) + A to HL
func gbADDHLHA(cpu *Core) {
	HA := uint16(cpu.Registers.H)<<8 + uint16(cpu.Registers.A)
	sum := HA + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((HA & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLHB Adds (H << 8) + B to HL
func gbADDHLHB(cpu *Core) {
	HB := uint16(cpu.Registers.H)<<8 + uint16(cpu.Registers.B)
	sum := HB + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((HB & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLHC Adds (H << 8) + C to HL
func gbADDHLHC(cpu *Core) {
	HC := uint16(cpu.Registers.H)<<8 + uint16(cpu.Registers.C)
	sum := HC + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((HC & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLHD Adds (H << 8) + D to HL
func gbADDHLHD(cpu *Core) {
	HD := uint16(cpu.Registers.H)<<8 + uint16(cpu.Registers.D)
	sum := HD + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((HD & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLHE Adds (H << 8) + E to HL
func gbADDHLHE(cpu *Core) {
	HE := uint16(cpu.Registers.H)<<8 + uint16(cpu.Registers.E)
	sum := HE + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((HE & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLHL Adds (H << 8) + L to HL
func gbADDHLHL(cpu *Core) {
	HL := uint16(cpu.Registers.H)<<8 + uint16(cpu.Registers.L)
	sum := HL + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((HL & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLLA Adds (L << 8) + A to HL
func gbADDHLLA(cpu *Core) {
	LA := uint16(cpu.Registers.L)<<8 + uint16(cpu.Registers.A)
	sum := LA + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((LA & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLLB Adds (L << 8) + B to HL
func gbADDHLLB(cpu *Core) {
	LB := uint16(cpu.Registers.L)<<8 + uint16(cpu.Registers.B)
	sum := LB + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((LB & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLLC Adds (L << 8) + C to HL
func gbADDHLLC(cpu *Core) {
	LC := uint16(cpu.Registers.L)<<8 + uint16(cpu.Registers.C)
	sum := LC + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((LC & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLLD Adds (L << 8) + D to HL
func gbADDHLLD(cpu *Core) {
	LD := uint16(cpu.Registers.L)<<8 + uint16(cpu.Registers.D)
	sum := LD + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((LD & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLLE Adds (L << 8) + E to HL
func gbADDHLLE(cpu *Core) {
	LE := uint16(cpu.Registers.L)<<8 + uint16(cpu.Registers.E)
	sum := LE + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((LE & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLLH Adds (L << 8) + H to HL
func gbADDHLLH(cpu *Core) {
	LH := uint16(cpu.Registers.L)<<8 + uint16(cpu.Registers.H)
	sum := LH + cpu.Registers.HL()

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((LH & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHL Adds byte from [HL] to A
func gbADDHL(cpu *Core) {
	z := cpu.Memory.ReadByte(cpu.Registers.HL())
	sum := uint16(cpu.Registers.A) + uint16(z)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(z&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDn Adds byte from [PC] to A
func gbADDn(cpu *Core) {
	z := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	sum := uint16(cpu.Registers.A) + uint16(z)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(z&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLSP Adds SP to HL
func gbADDHLSP(cpu *Core) {
	sum := cpu.Registers.HL() + cpu.Registers.SP
	cpu.Registers.SetCarry(sum > 65535)
	//cpu.Registers.SetZero(su & 0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((cpu.Registers.SP & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDSPn Reads a signed byte from [PC] and adds to SP
func gbADDSPn(cpu *Core) {
	a := int(cpu.Memory.ReadByte(cpu.Registers.PC))
	cpu.Registers.PC++
	a = (a << 24) >> 24 // Convert unsigned byte to signed

	cpu.Registers.SetZero(false)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetCarry(int(cpu.Registers.SP&0xFF)+(a&0xFF) > 0xFF)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.SP&0xF)+(a&0xF) > 0xF)

	cpu.Registers.SP = uint16(int(cpu.Registers.SP) + a)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbADCHL Sets A to A + [HL] + FlagCarry
func gbADCHL(cpu *Core) {
	a := int(cpu.Registers.A)
	b := int(cpu.Memory.ReadByte(cpu.Registers.HL()))

	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := a + b + f

	cpu.Registers.SetZero(sum == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(a&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADCn Sets A to A + [PC] + FlagCarry
func gbADCn(cpu *Core) {
	a := int(cpu.Registers.A)
	b := int(cpu.Memory.ReadByte(cpu.Registers.PC))
	cpu.Registers.PC++

	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := a + b + f

	cpu.Registers.SetZero(sum == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(a&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBrA Subtracts A to A
func gbSUBrA(cpu *Core) {
	sum := int16(cpu.Registers.A) - int16(cpu.Registers.A)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.A & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrA Sets A to A - A - FlagCarry
func gbSBCrA(cpu *Core) {
	b := int(cpu.Registers.A)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrB Subtracts B to A
func gbSUBrB(cpu *Core) {
	sum := int16(cpu.Registers.A) - int16(cpu.Registers.B)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.B & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrB Sets A to A - B - FlagCarry
func gbSBCrB(cpu *Core) {
	b := int(cpu.Registers.B)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrC Subtracts C to A
func gbSUBrC(cpu *Core) {
	sum := int16(cpu.Registers.A) - int16(cpu.Registers.C)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.C & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrC Sets A to A - C - FlagCarry
func gbSBCrC(cpu *Core) {
	b := int(cpu.Registers.C)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrD Subtracts D to A
func gbSUBrD(cpu *Core) {
	sum := int16(cpu.Registers.A) - int16(cpu.Registers.D)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.D & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrD Sets A to A - D - FlagCarry
func gbSBCrD(cpu *Core) {
	b := int(cpu.Registers.D)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrE Subtracts E to A
func gbSUBrE(cpu *Core) {
	sum := int16(cpu.Registers.A) - int16(cpu.Registers.E)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.E & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrE Sets A to A - E - FlagCarry
func gbSBCrE(cpu *Core) {
	b := int(cpu.Registers.E)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrH Subtracts H to A
func gbSUBrH(cpu *Core) {
	sum := int16(cpu.Registers.A) - int16(cpu.Registers.H)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.H & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrH Sets A to A - H - FlagCarry
func gbSBCrH(cpu *Core) {
	b := int(cpu.Registers.H)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrL Subtracts L to A
func gbSUBrL(cpu *Core) {
	sum := int16(cpu.Registers.A) - int16(cpu.Registers.L)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.L & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrL Sets A to A - L - FlagCarry
func gbSBCrL(cpu *Core) {
	b := int(cpu.Registers.L)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBHLAB HL from (A << 8) + B
func gbSUBHLAB(cpu *Core) {
	AB := int(cpu.Registers.A)<<8 + int(cpu.Registers.B)
	sum := AB - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((AB & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLAC HL from (A << 8) + C
func gbSUBHLAC(cpu *Core) {
	AC := int(cpu.Registers.A)<<8 + int(cpu.Registers.C)
	sum := AC - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((AC & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLAD HL from (A << 8) + D
func gbSUBHLAD(cpu *Core) {
	AD := int(cpu.Registers.A)<<8 + int(cpu.Registers.D)
	sum := AD - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((AD & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLAE HL from (A << 8) + E
func gbSUBHLAE(cpu *Core) {
	AE := int(cpu.Registers.A)<<8 + int(cpu.Registers.E)
	sum := AE - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((AE & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLAH HL from (A << 8) + H
func gbSUBHLAH(cpu *Core) {
	AH := int(cpu.Registers.A)<<8 + int(cpu.Registers.H)
	sum := AH - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((AH & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLAL HL from (A << 8) + L
func gbSUBHLAL(cpu *Core) {
	AL := int(cpu.Registers.A)<<8 + int(cpu.Registers.L)
	sum := AL - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((AL & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLBA HL from (B << 8) + A
func gbSUBHLBA(cpu *Core) {
	BA := int(cpu.Registers.B)<<8 + int(cpu.Registers.A)
	sum := BA - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((BA & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLBC HL from (B << 8) + C
func gbSUBHLBC(cpu *Core) {
	BC := int(cpu.Registers.B)<<8 + int(cpu.Registers.C)
	sum := BC - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((BC & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLBD HL from (B << 8) + D
func gbSUBHLBD(cpu *Core) {
	BD := int(cpu.Registers.B)<<8 + int(cpu.Registers.D)
	sum := BD - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((BD & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLBE HL from (B << 8) + E
func gbSUBHLBE(cpu *Core) {
	BE := int(cpu.Registers.B)<<8 + int(cpu.Registers.E)
	sum := BE - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((BE & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLBH HL from (B << 8) + H
func gbSUBHLBH(cpu *Core) {
	BH := int(cpu.Registers.B)<<8 + int(cpu.Registers.H)
	sum := BH - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((BH & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLBL HL from (B << 8) + L
func gbSUBHLBL(cpu *Core) {
	BL := int(cpu.Registers.B)<<8 + int(cpu.Registers.L)
	sum := BL - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((BL & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLCA HL from (C << 8) + A
func gbSUBHLCA(cpu *Core) {
	CA := int(cpu.Registers.C)<<8 + int(cpu.Registers.A)
	sum := CA - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((CA & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLCB HL from (C << 8) + B
func gbSUBHLCB(cpu *Core) {
	CB := int(cpu.Registers.C)<<8 + int(cpu.Registers.B)
	sum := CB - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((CB & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLCD HL from (C << 8) + D
func gbSUBHLCD(cpu *Core) {
	CD := int(cpu.Registers.C)<<8 + int(cpu.Registers.D)
	sum := CD - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((CD & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLCE HL from (C << 8) + E
func gbSUBHLCE(cpu *Core) {
	CE := int(cpu.Registers.C)<<8 + int(cpu.Registers.E)
	sum := CE - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((CE & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLCH HL from (C << 8) + H
func gbSUBHLCH(cpu *Core) {
	CH := int(cpu.Registers.C)<<8 + int(cpu.Registers.H)
	sum := CH - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((CH & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLCL HL from (C << 8) + L
func gbSUBHLCL(cpu *Core) {
	CL := int(cpu.Registers.C)<<8 + int(cpu.Registers.L)
	sum := CL - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((CL & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLDA HL from (D << 8) + A
func gbSUBHLDA(cpu *Core) {
	DA := int(cpu.Registers.D)<<8 + int(cpu.Registers.A)
	sum := DA - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((DA & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLDB HL from (D << 8) + B
func gbSUBHLDB(cpu *Core) {
	DB := int(cpu.Registers.D)<<8 + int(cpu.Registers.B)
	sum := DB - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((DB & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLDC HL from (D << 8) + C
func gbSUBHLDC(cpu *Core) {
	DC := int(cpu.Registers.D)<<8 + int(cpu.Registers.C)
	sum := DC - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((DC & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLDE HL from (D << 8) + E
func gbSUBHLDE(cpu *Core) {
	DE := int(cpu.Registers.D)<<8 + int(cpu.Registers.E)
	sum := DE - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((DE & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLDH HL from (D << 8) + H
func gbSUBHLDH(cpu *Core) {
	DH := int(cpu.Registers.D)<<8 + int(cpu.Registers.H)
	sum := DH - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((DH & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLDL HL from (D << 8) + L
func gbSUBHLDL(cpu *Core) {
	DL := int(cpu.Registers.D)<<8 + int(cpu.Registers.L)
	sum := DL - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((DL & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLEA HL from (E << 8) + A
func gbSUBHLEA(cpu *Core) {
	EA := int(cpu.Registers.E)<<8 + int(cpu.Registers.A)
	sum := EA - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((EA & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLEB HL from (E << 8) + B
func gbSUBHLEB(cpu *Core) {
	EB := int(cpu.Registers.E)<<8 + int(cpu.Registers.B)
	sum := EB - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((EB & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLEC HL from (E << 8) + C
func gbSUBHLEC(cpu *Core) {
	EC := int(cpu.Registers.E)<<8 + int(cpu.Registers.C)
	sum := EC - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((EC & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLED HL from (E << 8) + D
func gbSUBHLED(cpu *Core) {
	ED := int(cpu.Registers.E)<<8 + int(cpu.Registers.D)
	sum := ED - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((ED & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLEH HL from (E << 8) + H
func gbSUBHLEH(cpu *Core) {
	EH := int(cpu.Registers.E)<<8 + int(cpu.Registers.H)
	sum := EH - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((EH & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLEL HL from (E << 8) + L
func gbSUBHLEL(cpu *Core) {
	EL := int(cpu.Registers.E)<<8 + int(cpu.Registers.L)
	sum := EL - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((EL & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLHA HL from (H << 8) + A
func gbSUBHLHA(cpu *Core) {
	HA := int(cpu.Registers.H)<<8 + int(cpu.Registers.A)
	sum := HA - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((HA & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLHB HL from (H << 8) + B
func gbSUBHLHB(cpu *Core) {
	HB := int(cpu.Registers.H)<<8 + int(cpu.Registers.B)
	sum := HB - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((HB & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLHC HL from (H << 8) + C
func gbSUBHLHC(cpu *Core) {
	HC := int(cpu.Registers.H)<<8 + int(cpu.Registers.C)
	sum := HC - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((HC & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLHD HL from (H << 8) + D
func gbSUBHLHD(cpu *Core) {
	HD := int(cpu.Registers.H)<<8 + int(cpu.Registers.D)
	sum := HD - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((HD & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLHE HL from (H << 8) + E
func gbSUBHLHE(cpu *Core) {
	HE := int(cpu.Registers.H)<<8 + int(cpu.Registers.E)
	sum := HE - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((HE & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLHL HL from (H << 8) + L
func gbSUBHLHL(cpu *Core) {
	HL := int(cpu.Registers.H)<<8 + int(cpu.Registers.L)
	sum := HL - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((HL & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLLA HL from (L << 8) + A
func gbSUBHLLA(cpu *Core) {
	LA := int(cpu.Registers.L)<<8 + int(cpu.Registers.A)
	sum := LA - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((LA & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLLB HL from (L << 8) + B
func gbSUBHLLB(cpu *Core) {
	LB := int(cpu.Registers.L)<<8 + int(cpu.Registers.B)
	sum := LB - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((LB & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLLC HL from (L << 8) + C
func gbSUBHLLC(cpu *Core) {
	LC := int(cpu.Registers.L)<<8 + int(cpu.Registers.C)
	sum := LC - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((LC & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLLD HL from (L << 8) + D
func gbSUBHLLD(cpu *Core) {
	LD := int(cpu.Registers.L)<<8 + int(cpu.Registers.D)
	sum := LD - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((LD & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLLE HL from (L << 8) + E
func gbSUBHLLE(cpu *Core) {
	LE := int(cpu.Registers.L)<<8 + int(cpu.Registers.E)
	sum := LE - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((LE & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLLH HL from (L << 8) + H
func gbSUBHLLH(cpu *Core) {
	LH := int(cpu.Registers.L)<<8 + int(cpu.Registers.H)
	sum := LH - int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((LH & 0xFFF) > int(cpu.Registers.HL()&0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHL Subtracts byte from [HL] to A
func gbSUBHL(cpu *Core) {
	z := cpu.Memory.ReadByte(cpu.Registers.HL())
	sum := int16(cpu.Registers.A) - int16(z)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (z & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBn Subtracts byte from [PC] to A
func gbSUBn(cpu *Core) {
	z := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	sum := int16(cpu.Registers.A) - int16(z)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (z & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBHLSP Subtracts SP from HL
func gbSUBHLSP(cpu *Core) {
	sum := int(cpu.Registers.HL()) - int(cpu.Registers.SP)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFFFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(((cpu.Registers.SP & 0xFFF) < (cpu.Registers.HL() & 0xFFF)))

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSBCHL Sets A to A - [HL] - FlagCarry
func gbSBCHL(cpu *Core) {
	a := int(cpu.Registers.A)
	b := int(cpu.Memory.ReadByte(cpu.Registers.HL()))

	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := a - b - f

	cpu.Registers.SetZero(sum == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(a&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSBCn Sets A to A - [PC] - FlagCarry
func gbSBCn(cpu *Core) {
	a := int(cpu.Registers.A)
	b := int(cpu.Memory.ReadByte(cpu.Registers.PC))
	cpu.Registers.PC++

	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := a - b - f

	cpu.Registers.SetZero(sum == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(a&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbCPrA Checks if A == A
func gbCPrA(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.A)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.A)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.A & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrB Checks if B == A
func gbCPrB(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.B)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.B)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.B & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrC Checks if C == A
func gbCPrC(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.C)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.C)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.C & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrD Checks if D == A
func gbCPrD(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.D)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.D)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.D & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrE Checks if E == A
func gbCPrE(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.E)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.E)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.E & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrH Checks if H == A
func gbCPrH(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.H)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.H)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.H & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrL Checks if L == A
func gbCPrL(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.L)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.L)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.L & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPHL Compares byte from [HL] to A
func gbCPHL(cpu *Core) {
	b := cpu.Memory.ReadByte(cpu.Registers.HL())

	cpu.Registers.SetCarry(cpu.Registers.A < b)
	cpu.Registers.SetZero(cpu.Registers.A == b)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (b & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPn Compares byte from [PC] to A
func gbCPn(cpu *Core) {
	b := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.SetCarry(cpu.Registers.A < b)
	cpu.Registers.SetZero(cpu.Registers.A == b)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (b & 0xF))

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbANDrA Sets A to A & A
func gbANDrA(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.A

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrA Sets A to A | A
func gbORrA(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.A

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrA Sets A to A | A
func gbXORrA(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.A

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrB Sets A to A & B
func gbANDrB(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.B

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrB Sets A to A | B
func gbORrB(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.B

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrB Sets A to A | B
func gbXORrB(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.B

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrC Sets A to A & C
func gbANDrC(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.C

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrC Sets A to A | C
func gbORrC(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.C

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrC Sets A to A | C
func gbXORrC(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.C

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrD Sets A to A & D
func gbANDrD(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.D

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrD Sets A to A | D
func gbORrD(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.D

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrD Sets A to A | D
func gbXORrD(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.D

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrE Sets A to A & E
func gbANDrE(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.E

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrE Sets A to A | E
func gbORrE(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.E

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrE Sets A to A | E
func gbXORrE(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.E

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrH Sets A to A & H
func gbANDrH(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.H

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrH Sets A to A | H
func gbORrH(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.H

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrH Sets A to A | H
func gbXORrH(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.H

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrL Sets A to A & L
func gbANDrL(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.L

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrL Sets A to A | L
func gbORrL(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.L

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrL Sets A to A | L
func gbXORrL(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.L

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDAA
func gbDAA(cpu *Core) {
	a := int(cpu.Registers.A)

	if cpu.Registers.GetSub() {
		if cpu.Registers.GetHalfCarry() {
			a -= 0x6
		} else {
			a -= 0x60
		}
	} else {
		if cpu.Registers.GetHalfCarry() || (a&0xF) > 0x9 {
			a += 0x6
		} else {
			a += 0x60
		}
	}

	cpu.Registers.A = uint8(a)

	cpu.Registers.SetZero(a == 0)
	cpu.Registers.SetHalfCarry(false)

	if a&0x100 == 0x100 {
		cpu.Registers.SetCarry(true)
	}

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDHL Sets A to A & [HL]
func gbANDHL(cpu *Core) {
	cpu.Registers.A &= cpu.Memory.ReadByte(cpu.Registers.HL())

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbANDn Sets A to A & [PC]
func gbANDn(cpu *Core) {
	cpu.Registers.A &= cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbORHL Sets A to A | [HL]
func gbORHL(cpu *Core) {
	cpu.Registers.A |= cpu.Memory.ReadByte(cpu.Registers.HL())

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbORn Sets A to A | [PC]
func gbORn(cpu *Core) {
	cpu.Registers.A |= cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbXORHL Sets A to A ^ [HL]
func gbXORHL(cpu *Core) {
	cpu.Registers.A ^= cpu.Memory.ReadByte(cpu.Registers.HL())

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbXORn Sets A to A ^ [PC]
func gbXORn(cpu *Core) {
	cpu.Registers.A ^= cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCrA Sets A to A + 1
func gbINCrA(cpu *Core) {
	v := cpu.Registers.A
	cpu.Registers.A++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrA Sets A to A - 1
func gbDECrA(cpu *Core) {
	v := cpu.Registers.A
	cpu.Registers.A--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrB Sets B to B + 1
func gbINCrB(cpu *Core) {
	v := cpu.Registers.B
	cpu.Registers.B++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.B == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrB Sets B to B - 1
func gbDECrB(cpu *Core) {
	v := cpu.Registers.B
	cpu.Registers.B--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.B == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrC Sets C to C + 1
func gbINCrC(cpu *Core) {
	v := cpu.Registers.C
	cpu.Registers.C++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.C == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrC Sets C to C - 1
func gbDECrC(cpu *Core) {
	v := cpu.Registers.C
	cpu.Registers.C--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.C == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrD Sets D to D + 1
func gbINCrD(cpu *Core) {
	v := cpu.Registers.D
	cpu.Registers.D++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.D == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrD Sets D to D - 1
func gbDECrD(cpu *Core) {
	v := cpu.Registers.D
	cpu.Registers.D--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.D == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrE Sets E to E + 1
func gbINCrE(cpu *Core) {
	v := cpu.Registers.E
	cpu.Registers.E++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.E == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrE Sets E to E - 1
func gbDECrE(cpu *Core) {
	v := cpu.Registers.E
	cpu.Registers.E--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.E == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrH Sets H to H + 1
func gbINCrH(cpu *Core) {
	v := cpu.Registers.H
	cpu.Registers.H++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.H == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrH Sets H to H - 1
func gbDECrH(cpu *Core) {
	v := cpu.Registers.H
	cpu.Registers.H--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.H == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrL Sets L to L + 1
func gbINCrL(cpu *Core) {
	v := cpu.Registers.L
	cpu.Registers.L++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.L == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrL Sets L to L - 1
func gbDECrL(cpu *Core) {
	v := cpu.Registers.L
	cpu.Registers.L--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.L == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCAA Sets ( A << 8 + A ) to (  A << 8 + A ) + 1
func gbINCAA(cpu *Core) {
	cpu.Registers.A++

	if cpu.Registers.A == 0 {
		cpu.Registers.A++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECAA Sets ( A << 8 + A ) to ( A << 8 + A ) - 1
func gbDECAA(cpu *Core) {
	cpu.Registers.A--

	if cpu.Registers.A == 0 {
		cpu.Registers.A--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCAB Sets ( A << 8 + B ) to (  A << 8 + B ) + 1
func gbINCAB(cpu *Core) {
	cpu.Registers.B++

	if cpu.Registers.B == 0 {
		cpu.Registers.A++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECAB Sets ( A << 8 + B ) to ( A << 8 + B ) - 1
func gbDECAB(cpu *Core) {
	cpu.Registers.B--

	if cpu.Registers.B == 0 {
		cpu.Registers.A--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCAC Sets ( A << 8 + C ) to (  A << 8 + C ) + 1
func gbINCAC(cpu *Core) {
	cpu.Registers.C++

	if cpu.Registers.C == 0 {
		cpu.Registers.A++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECAC Sets ( A << 8 + C ) to ( A << 8 + C ) - 1
func gbDECAC(cpu *Core) {
	cpu.Registers.C--

	if cpu.Registers.C == 0 {
		cpu.Registers.A--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCAD Sets ( A << 8 + D ) to (  A << 8 + D ) + 1
func gbINCAD(cpu *Core) {
	cpu.Registers.D++

	if cpu.Registers.D == 0 {
		cpu.Registers.A++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECAD Sets ( A << 8 + D ) to ( A << 8 + D ) - 1
func gbDECAD(cpu *Core) {
	cpu.Registers.D--

	if cpu.Registers.D == 0 {
		cpu.Registers.A--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCAE Sets ( A << 8 + E ) to (  A << 8 + E ) + 1
func gbINCAE(cpu *Core) {
	cpu.Registers.E++

	if cpu.Registers.E == 0 {
		cpu.Registers.A++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECAE Sets ( A << 8 + E ) to ( A << 8 + E ) - 1
func gbDECAE(cpu *Core) {
	cpu.Registers.E--

	if cpu.Registers.E == 0 {
		cpu.Registers.A--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCAH Sets ( A << 8 + H ) to (  A << 8 + H ) + 1
func gbINCAH(cpu *Core) {
	cpu.Registers.H++

	if cpu.Registers.H == 0 {
		cpu.Registers.A++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECAH Sets ( A << 8 + H ) to ( A << 8 + H ) - 1
func gbDECAH(cpu *Core) {
	cpu.Registers.H--

	if cpu.Registers.H == 0 {
		cpu.Registers.A--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCAL Sets ( A << 8 + L ) to (  A << 8 + L ) + 1
func gbINCAL(cpu *Core) {
	cpu.Registers.L++

	if cpu.Registers.L == 0 {
		cpu.Registers.A++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECAL Sets ( A << 8 + L ) to ( A << 8 + L ) - 1
func gbDECAL(cpu *Core) {
	cpu.Registers.L--

	if cpu.Registers.L == 0 {
		cpu.Registers.A--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCBA Sets ( B << 8 + A ) to (  B << 8 + A ) + 1
func gbINCBA(cpu *Core) {
	cpu.Registers.A++

	if cpu.Registers.A == 0 {
		cpu.Registers.B++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECBA Sets ( B << 8 + A ) to ( B << 8 + A ) - 1
func gbDECBA(cpu *Core) {
	cpu.Registers.A--

	if cpu.Registers.A == 0 {
		cpu.Registers.B--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCBB Sets ( B << 8 + B ) to (  B << 8 + B ) + 1
func gbINCBB(cpu *Core) {
	cpu.Registers.B++

	if cpu.Registers.B == 0 {
		cpu.Registers.B++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECBB Sets ( B << 8 + B ) to ( B << 8 + B ) - 1
func gbDECBB(cpu *Core) {
	cpu.Registers.B--

	if cpu.Registers.B == 0 {
		cpu.Registers.B--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCBC Sets ( B << 8 + C ) to (  B << 8 + C ) + 1
func gbINCBC(cpu *Core) {
	cpu.Registers.C++

	if cpu.Registers.C == 0 {
		cpu.Registers.B++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECBC Sets ( B << 8 + C ) to ( B << 8 + C ) - 1
func gbDECBC(cpu *Core) {
	cpu.Registers.C--

	if cpu.Registers.C == 0 {
		cpu.Registers.B--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCBD Sets ( B << 8 + D ) to (  B << 8 + D ) + 1
func gbINCBD(cpu *Core) {
	cpu.Registers.D++

	if cpu.Registers.D == 0 {
		cpu.Registers.B++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECBD Sets ( B << 8 + D ) to ( B << 8 + D ) - 1
func gbDECBD(cpu *Core) {
	cpu.Registers.D--

	if cpu.Registers.D == 0 {
		cpu.Registers.B--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCBE Sets ( B << 8 + E ) to (  B << 8 + E ) + 1
func gbINCBE(cpu *Core) {
	cpu.Registers.E++

	if cpu.Registers.E == 0 {
		cpu.Registers.B++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECBE Sets ( B << 8 + E ) to ( B << 8 + E ) - 1
func gbDECBE(cpu *Core) {
	cpu.Registers.E--

	if cpu.Registers.E == 0 {
		cpu.Registers.B--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCBH Sets ( B << 8 + H ) to (  B << 8 + H ) + 1
func gbINCBH(cpu *Core) {
	cpu.Registers.H++

	if cpu.Registers.H == 0 {
		cpu.Registers.B++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECBH Sets ( B << 8 + H ) to ( B << 8 + H ) - 1
func gbDECBH(cpu *Core) {
	cpu.Registers.H--

	if cpu.Registers.H == 0 {
		cpu.Registers.B--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCBL Sets ( B << 8 + L ) to (  B << 8 + L ) + 1
func gbINCBL(cpu *Core) {
	cpu.Registers.L++

	if cpu.Registers.L == 0 {
		cpu.Registers.B++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECBL Sets ( B << 8 + L ) to ( B << 8 + L ) - 1
func gbDECBL(cpu *Core) {
	cpu.Registers.L--

	if cpu.Registers.L == 0 {
		cpu.Registers.B--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCCA Sets ( C << 8 + A ) to (  C << 8 + A ) + 1
func gbINCCA(cpu *Core) {
	cpu.Registers.A++

	if cpu.Registers.A == 0 {
		cpu.Registers.C++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECCA Sets ( C << 8 + A ) to ( C << 8 + A ) - 1
func gbDECCA(cpu *Core) {
	cpu.Registers.A--

	if cpu.Registers.A == 0 {
		cpu.Registers.C--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCCB Sets ( C << 8 + B ) to (  C << 8 + B ) + 1
func gbINCCB(cpu *Core) {
	cpu.Registers.B++

	if cpu.Registers.B == 0 {
		cpu.Registers.C++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECCB Sets ( C << 8 + B ) to ( C << 8 + B ) - 1
func gbDECCB(cpu *Core) {
	cpu.Registers.B--

	if cpu.Registers.B == 0 {
		cpu.Registers.C--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCCC Sets ( C << 8 + C ) to (  C << 8 + C ) + 1
func gbINCCC(cpu *Core) {
	cpu.Registers.C++

	if cpu.Registers.C == 0 {
		cpu.Registers.C++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECCC Sets ( C << 8 + C ) to ( C << 8 + C ) - 1
func gbDECCC(cpu *Core) {
	cpu.Registers.C--

	if cpu.Registers.C == 0 {
		cpu.Registers.C--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCCD Sets ( C << 8 + D ) to (  C << 8 + D ) + 1
func gbINCCD(cpu *Core) {
	cpu.Registers.D++

	if cpu.Registers.D == 0 {
		cpu.Registers.C++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECCD Sets ( C << 8 + D ) to ( C << 8 + D ) - 1
func gbDECCD(cpu *Core) {
	cpu.Registers.D--

	if cpu.Registers.D == 0 {
		cpu.Registers.C--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCCE Sets ( C << 8 + E ) to (  C << 8 + E ) + 1
func gbINCCE(cpu *Core) {
	cpu.Registers.E++

	if cpu.Registers.E == 0 {
		cpu.Registers.C++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECCE Sets ( C << 8 + E ) to ( C << 8 + E ) - 1
func gbDECCE(cpu *Core) {
	cpu.Registers.E--

	if cpu.Registers.E == 0 {
		cpu.Registers.C--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCCH Sets ( C << 8 + H ) to (  C << 8 + H ) + 1
func gbINCCH(cpu *Core) {
	cpu.Registers.H++

	if cpu.Registers.H == 0 {
		cpu.Registers.C++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECCH Sets ( C << 8 + H ) to ( C << 8 + H ) - 1
func gbDECCH(cpu *Core) {
	cpu.Registers.H--

	if cpu.Registers.H == 0 {
		cpu.Registers.C--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCCL Sets ( C << 8 + L ) to (  C << 8 + L ) + 1
func gbINCCL(cpu *Core) {
	cpu.Registers.L++

	if cpu.Registers.L == 0 {
		cpu.Registers.C++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECCL Sets ( C << 8 + L ) to ( C << 8 + L ) - 1
func gbDECCL(cpu *Core) {
	cpu.Registers.L--

	if cpu.Registers.L == 0 {
		cpu.Registers.C--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCDA Sets ( D << 8 + A ) to (  D << 8 + A ) + 1
func gbINCDA(cpu *Core) {
	cpu.Registers.A++

	if cpu.Registers.A == 0 {
		cpu.Registers.D++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECDA Sets ( D << 8 + A ) to ( D << 8 + A ) - 1
func gbDECDA(cpu *Core) {
	cpu.Registers.A--

	if cpu.Registers.A == 0 {
		cpu.Registers.D--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCDB Sets ( D << 8 + B ) to (  D << 8 + B ) + 1
func gbINCDB(cpu *Core) {
	cpu.Registers.B++

	if cpu.Registers.B == 0 {
		cpu.Registers.D++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECDB Sets ( D << 8 + B ) to ( D << 8 + B ) - 1
func gbDECDB(cpu *Core) {
	cpu.Registers.B--

	if cpu.Registers.B == 0 {
		cpu.Registers.D--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCDC Sets ( D << 8 + C ) to (  D << 8 + C ) + 1
func gbINCDC(cpu *Core) {
	cpu.Registers.C++

	if cpu.Registers.C == 0 {
		cpu.Registers.D++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECDC Sets ( D << 8 + C ) to ( D << 8 + C ) - 1
func gbDECDC(cpu *Core) {
	cpu.Registers.C--

	if cpu.Registers.C == 0 {
		cpu.Registers.D--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCDD Sets ( D << 8 + D ) to (  D << 8 + D ) + 1
func gbINCDD(cpu *Core) {
	cpu.Registers.D++

	if cpu.Registers.D == 0 {
		cpu.Registers.D++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECDD Sets ( D << 8 + D ) to ( D << 8 + D ) - 1
func gbDECDD(cpu *Core) {
	cpu.Registers.D--

	if cpu.Registers.D == 0 {
		cpu.Registers.D--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCDE Sets ( D << 8 + E ) to (  D << 8 + E ) + 1
func gbINCDE(cpu *Core) {
	cpu.Registers.E++

	if cpu.Registers.E == 0 {
		cpu.Registers.D++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECDE Sets ( D << 8 + E ) to ( D << 8 + E ) - 1
func gbDECDE(cpu *Core) {
	cpu.Registers.E--

	if cpu.Registers.E == 0 {
		cpu.Registers.D--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCDH Sets ( D << 8 + H ) to (  D << 8 + H ) + 1
func gbINCDH(cpu *Core) {
	cpu.Registers.H++

	if cpu.Registers.H == 0 {
		cpu.Registers.D++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECDH Sets ( D << 8 + H ) to ( D << 8 + H ) - 1
func gbDECDH(cpu *Core) {
	cpu.Registers.H--

	if cpu.Registers.H == 0 {
		cpu.Registers.D--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCDL Sets ( D << 8 + L ) to (  D << 8 + L ) + 1
func gbINCDL(cpu *Core) {
	cpu.Registers.L++

	if cpu.Registers.L == 0 {
		cpu.Registers.D++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECDL Sets ( D << 8 + L ) to ( D << 8 + L ) - 1
func gbDECDL(cpu *Core) {
	cpu.Registers.L--

	if cpu.Registers.L == 0 {
		cpu.Registers.D--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCEA Sets ( E << 8 + A ) to (  E << 8 + A ) + 1
func gbINCEA(cpu *Core) {
	cpu.Registers.A++

	if cpu.Registers.A == 0 {
		cpu.Registers.E++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECEA Sets ( E << 8 + A ) to ( E << 8 + A ) - 1
func gbDECEA(cpu *Core) {
	cpu.Registers.A--

	if cpu.Registers.A == 0 {
		cpu.Registers.E--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCEB Sets ( E << 8 + B ) to (  E << 8 + B ) + 1
func gbINCEB(cpu *Core) {
	cpu.Registers.B++

	if cpu.Registers.B == 0 {
		cpu.Registers.E++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECEB Sets ( E << 8 + B ) to ( E << 8 + B ) - 1
func gbDECEB(cpu *Core) {
	cpu.Registers.B--

	if cpu.Registers.B == 0 {
		cpu.Registers.E--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCEC Sets ( E << 8 + C ) to (  E << 8 + C ) + 1
func gbINCEC(cpu *Core) {
	cpu.Registers.C++

	if cpu.Registers.C == 0 {
		cpu.Registers.E++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECEC Sets ( E << 8 + C ) to ( E << 8 + C ) - 1
func gbDECEC(cpu *Core) {
	cpu.Registers.C--

	if cpu.Registers.C == 0 {
		cpu.Registers.E--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCED Sets ( E << 8 + D ) to (  E << 8 + D ) + 1
func gbINCED(cpu *Core) {
	cpu.Registers.D++

	if cpu.Registers.D == 0 {
		cpu.Registers.E++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECED Sets ( E << 8 + D ) to ( E << 8 + D ) - 1
func gbDECED(cpu *Core) {
	cpu.Registers.D--

	if cpu.Registers.D == 0 {
		cpu.Registers.E--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCEE Sets ( E << 8 + E ) to (  E << 8 + E ) + 1
func gbINCEE(cpu *Core) {
	cpu.Registers.E++

	if cpu.Registers.E == 0 {
		cpu.Registers.E++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECEE Sets ( E << 8 + E ) to ( E << 8 + E ) - 1
func gbDECEE(cpu *Core) {
	cpu.Registers.E--

	if cpu.Registers.E == 0 {
		cpu.Registers.E--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCEH Sets ( E << 8 + H ) to (  E << 8 + H ) + 1
func gbINCEH(cpu *Core) {
	cpu.Registers.H++

	if cpu.Registers.H == 0 {
		cpu.Registers.E++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECEH Sets ( E << 8 + H ) to ( E << 8 + H ) - 1
func gbDECEH(cpu *Core) {
	cpu.Registers.H--

	if cpu.Registers.H == 0 {
		cpu.Registers.E--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCEL Sets ( E << 8 + L ) to (  E << 8 + L ) + 1
func gbINCEL(cpu *Core) {
	cpu.Registers.L++

	if cpu.Registers.L == 0 {
		cpu.Registers.E++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECEL Sets ( E << 8 + L ) to ( E << 8 + L ) - 1
func gbDECEL(cpu *Core) {
	cpu.Registers.L--

	if cpu.Registers.L == 0 {
		cpu.Registers.E--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHA Sets ( H << 8 + A ) to (  H << 8 + A ) + 1
func gbINCHA(cpu *Core) {
	cpu.Registers.A++

	if cpu.Registers.A == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECHA Sets ( H << 8 + A ) to ( H << 8 + A ) - 1
func gbDECHA(cpu *Core) {
	cpu.Registers.A--

	if cpu.Registers.A == 0 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHB Sets ( H << 8 + B ) to (  H << 8 + B ) + 1
func gbINCHB(cpu *Core) {
	cpu.Registers.B++

	if cpu.Registers.B == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECHB Sets ( H << 8 + B ) to ( H << 8 + B ) - 1
func gbDECHB(cpu *Core) {
	cpu.Registers.B--

	if cpu.Registers.B == 0 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHC Sets ( H << 8 + C ) to (  H << 8 + C ) + 1
func gbINCHC(cpu *Core) {
	cpu.Registers.C++

	if cpu.Registers.C == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECHC Sets ( H << 8 + C ) to ( H << 8 + C ) - 1
func gbDECHC(cpu *Core) {
	cpu.Registers.C--

	if cpu.Registers.C == 0 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHD Sets ( H << 8 + D ) to (  H << 8 + D ) + 1
func gbINCHD(cpu *Core) {
	cpu.Registers.D++

	if cpu.Registers.D == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECHD Sets ( H << 8 + D ) to ( H << 8 + D ) - 1
func gbDECHD(cpu *Core) {
	cpu.Registers.D--

	if cpu.Registers.D == 0 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHE Sets ( H << 8 + E ) to (  H << 8 + E ) + 1
func gbINCHE(cpu *Core) {
	cpu.Registers.E++

	if cpu.Registers.E == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECHE Sets ( H << 8 + E ) to ( H << 8 + E ) - 1
func gbDECHE(cpu *Core) {
	cpu.Registers.E--

	if cpu.Registers.E == 0 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHH Sets ( H << 8 + H ) to (  H << 8 + H ) + 1
func gbINCHH(cpu *Core) {
	cpu.Registers.H++

	if cpu.Registers.H == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECHH Sets ( H << 8 + H ) to ( H << 8 + H ) - 1
func gbDECHH(cpu *Core) {
	cpu.Registers.H--

	if cpu.Registers.H == 0 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHL Sets ( H << 8 + L ) to (  H << 8 + L ) + 1
func gbINCHL(cpu *Core) {
	cpu.Registers.L++

	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECHL Sets ( H << 8 + L ) to ( H << 8 + L ) - 1
func gbDECHL(cpu *Core) {
	cpu.Registers.L--

	if cpu.Registers.L == 0 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCLA Sets ( L << 8 + A ) to (  L << 8 + A ) + 1
func gbINCLA(cpu *Core) {
	cpu.Registers.A++

	if cpu.Registers.A == 0 {
		cpu.Registers.L++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECLA Sets ( L << 8 + A ) to ( L << 8 + A ) - 1
func gbDECLA(cpu *Core) {
	cpu.Registers.A--

	if cpu.Registers.A == 0 {
		cpu.Registers.L--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCLB Sets ( L << 8 + B ) to (  L << 8 + B ) + 1
func gbINCLB(cpu *Core) {
	cpu.Registers.B++

	if cpu.Registers.B == 0 {
		cpu.Registers.L++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECLB Sets ( L << 8 + B ) to ( L << 8 + B ) - 1
func gbDECLB(cpu *Core) {
	cpu.Registers.B--

	if cpu.Registers.B == 0 {
		cpu.Registers.L--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCLC Sets ( L << 8 + C ) to (  L << 8 + C ) + 1
func gbINCLC(cpu *Core) {
	cpu.Registers.C++

	if cpu.Registers.C == 0 {
		cpu.Registers.L++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECLC Sets ( L << 8 + C ) to ( L << 8 + C ) - 1
func gbDECLC(cpu *Core) {
	cpu.Registers.C--

	if cpu.Registers.C == 0 {
		cpu.Registers.L--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCLD Sets ( L << 8 + D ) to (  L << 8 + D ) + 1
func gbINCLD(cpu *Core) {
	cpu.Registers.D++

	if cpu.Registers.D == 0 {
		cpu.Registers.L++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECLD Sets ( L << 8 + D ) to ( L << 8 + D ) - 1
func gbDECLD(cpu *Core) {
	cpu.Registers.D--

	if cpu.Registers.D == 0 {
		cpu.Registers.L--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCLE Sets ( L << 8 + E ) to (  L << 8 + E ) + 1
func gbINCLE(cpu *Core) {
	cpu.Registers.E++

	if cpu.Registers.E == 0 {
		cpu.Registers.L++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECLE Sets ( L << 8 + E ) to ( L << 8 + E ) - 1
func gbDECLE(cpu *Core) {
	cpu.Registers.E--

	if cpu.Registers.E == 0 {
		cpu.Registers.L--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCLH Sets ( L << 8 + H ) to (  L << 8 + H ) + 1
func gbINCLH(cpu *Core) {
	cpu.Registers.H++

	if cpu.Registers.H == 0 {
		cpu.Registers.L++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECLH Sets ( L << 8 + H ) to ( L << 8 + H ) - 1
func gbDECLH(cpu *Core) {
	cpu.Registers.H--

	if cpu.Registers.H == 0 {
		cpu.Registers.L--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCLL Sets ( L << 8 + L ) to (  L << 8 + L ) + 1
func gbINCLL(cpu *Core) {
	cpu.Registers.L++

	if cpu.Registers.L == 0 {
		cpu.Registers.L++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECLL Sets ( L << 8 + L ) to ( L << 8 + L ) - 1
func gbDECLL(cpu *Core) {
	cpu.Registers.L--

	if cpu.Registers.L == 0 {
		cpu.Registers.L--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHLm Sets [HL] to [HL] + 1
func gbINCHLm(cpu *Core) {
	v := int(cpu.Memory.ReadByte(cpu.Registers.HL()))
	cpu.Memory.WriteByte(cpu.Registers.HL(), (byte)(v+1))

	cpu.Registers.SetCarry((v + 1) > 255)
	cpu.Registers.SetZero((v+1)&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbDECHLm Sets [HL] to [HL] - 1
func gbDECHLm(cpu *Core) {
	v := int(cpu.Memory.ReadByte(cpu.Registers.HL()))
	cpu.Memory.WriteByte(cpu.Registers.HL(), (byte)(v-1))

	cpu.Registers.SetCarry((v - 1) < 0)
	cpu.Registers.SetZero((v-1)&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbDECSP Sets SP = SP - 1
func gbDECSP(cpu *Core) {
	cpu.Registers.SP--

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCSP Sets SP = SP + 1
func gbINCSP(cpu *Core) {
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// endregion
// region Bit Manipulation Instructions

func gbRLA(cpu *Core) {
	c := (cpu.Registers.A >> 7) > 0
	f := byte(0)
	if cpu.Registers.GetCarry() {
		f = 1
	}

	cpu.Registers.A = cpu.Registers.A<<1 | f

	cpu.Registers.SetCarry(c)
	cpu.Registers.SetZero(false)
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbRLCA(cpu *Core) {
	c := (cpu.Registers.A >> 7) & 0x1
	cpu.Registers.A = cpu.Registers.A<<1 | c

	cpu.Registers.SetCarry(c > 0)
	cpu.Registers.SetZero(false)
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbRRA(cpu *Core) {
	c := cpu.Registers.A & 0x1
	f := byte(0)
	if cpu.Registers.GetCarry() {
		f = 1
	}

	cpu.Registers.A = (cpu.Registers.A >> 1) | (f << 7)

	cpu.Registers.SetCarry(c > 0)
	cpu.Registers.SetZero(false)
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbRRCA(cpu *Core) {
	c := cpu.Registers.A & 0x1

	cpu.Registers.A = (cpu.Registers.A >> 1) | (c << 7)

	cpu.Registers.SetCarry(c > 0)
	cpu.Registers.SetZero(false)
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbCPL(cpu *Core) {
	cpu.Registers.A = ^cpu.Registers.A

	cpu.Registers.SetHalfCarry(true)
	cpu.Registers.SetSub(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}
func gbCCF(cpu *Core) {
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetCarry(!cpu.Registers.GetCarry())
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbSCF(cpu *Core) {
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetCarry(true)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// endregion
// region Interrupt Calls Instructions

// gbRSTXX Triggers the Interrupt at XX
func gbRSTXX(cpu *Core, addr uint16) {
	cpu.Registers.SaveRegisters()
	cpu.Registers.SP -= 2
	cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC)
	cpu.Registers.PC = addr

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// endregion
// region Stack Management Instructions

// gbPUSHAB Writes A and B to the Stack
func gbPUSHAB(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPAB Reads A and B to the Stack
func gbPOPAB(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHAC Writes A and C to the Stack
func gbPUSHAC(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPAC Reads A and C to the Stack
func gbPOPAC(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHAD Writes A and D to the Stack
func gbPUSHAD(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPAD Reads A and D to the Stack
func gbPOPAD(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHAE Writes A and E to the Stack
func gbPUSHAE(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPAE Reads A and E to the Stack
func gbPOPAE(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHAH Writes A and H to the Stack
func gbPUSHAH(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPAH Reads A and H to the Stack
func gbPOPAH(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHAL Writes A and L to the Stack
func gbPUSHAL(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPAL Reads A and L to the Stack
func gbPOPAL(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHAF Writes A and F to the Stack
func gbPUSHAF(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPAF Reads A and F to the Stack
func gbPOPAF(cpu *Core) {

	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHBA Writes B and A to the Stack
func gbPUSHBA(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPBA Reads B and A to the Stack
func gbPOPBA(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHBC Writes B and C to the Stack
func gbPUSHBC(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPBC Reads B and C to the Stack
func gbPOPBC(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHBD Writes B and D to the Stack
func gbPUSHBD(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPBD Reads B and D to the Stack
func gbPOPBD(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHBE Writes B and E to the Stack
func gbPUSHBE(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPBE Reads B and E to the Stack
func gbPOPBE(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHBH Writes B and H to the Stack
func gbPUSHBH(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPBH Reads B and H to the Stack
func gbPOPBH(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHBL Writes B and L to the Stack
func gbPUSHBL(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPBL Reads B and L to the Stack
func gbPOPBL(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHBF Writes B and F to the Stack
func gbPUSHBF(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPBF Reads B and F to the Stack
func gbPOPBF(cpu *Core) {

	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHCA Writes C and A to the Stack
func gbPUSHCA(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPCA Reads C and A to the Stack
func gbPOPCA(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHCB Writes C and B to the Stack
func gbPUSHCB(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPCB Reads C and B to the Stack
func gbPOPCB(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHCD Writes C and D to the Stack
func gbPUSHCD(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPCD Reads C and D to the Stack
func gbPOPCD(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHCE Writes C and E to the Stack
func gbPUSHCE(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPCE Reads C and E to the Stack
func gbPOPCE(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHCH Writes C and H to the Stack
func gbPUSHCH(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPCH Reads C and H to the Stack
func gbPOPCH(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHCL Writes C and L to the Stack
func gbPUSHCL(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPCL Reads C and L to the Stack
func gbPOPCL(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHCF Writes C and F to the Stack
func gbPUSHCF(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPCF Reads C and F to the Stack
func gbPOPCF(cpu *Core) {

	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHDA Writes D and A to the Stack
func gbPUSHDA(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPDA Reads D and A to the Stack
func gbPOPDA(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHDB Writes D and B to the Stack
func gbPUSHDB(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPDB Reads D and B to the Stack
func gbPOPDB(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHDC Writes D and C to the Stack
func gbPUSHDC(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPDC Reads D and C to the Stack
func gbPOPDC(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHDE Writes D and E to the Stack
func gbPUSHDE(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPDE Reads D and E to the Stack
func gbPOPDE(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHDH Writes D and H to the Stack
func gbPUSHDH(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPDH Reads D and H to the Stack
func gbPOPDH(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHDL Writes D and L to the Stack
func gbPUSHDL(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPDL Reads D and L to the Stack
func gbPOPDL(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHDF Writes D and F to the Stack
func gbPUSHDF(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPDF Reads D and F to the Stack
func gbPOPDF(cpu *Core) {

	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHEA Writes E and A to the Stack
func gbPUSHEA(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPEA Reads E and A to the Stack
func gbPOPEA(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHEB Writes E and B to the Stack
func gbPUSHEB(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPEB Reads E and B to the Stack
func gbPOPEB(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHEC Writes E and C to the Stack
func gbPUSHEC(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPEC Reads E and C to the Stack
func gbPOPEC(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHED Writes E and D to the Stack
func gbPUSHED(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPED Reads E and D to the Stack
func gbPOPED(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHEH Writes E and H to the Stack
func gbPUSHEH(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPEH Reads E and H to the Stack
func gbPOPEH(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHEL Writes E and L to the Stack
func gbPUSHEL(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPEL Reads E and L to the Stack
func gbPOPEL(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHEF Writes E and F to the Stack
func gbPUSHEF(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPEF Reads E and F to the Stack
func gbPOPEF(cpu *Core) {

	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHHA Writes H and A to the Stack
func gbPUSHHA(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPHA Reads H and A to the Stack
func gbPOPHA(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHHB Writes H and B to the Stack
func gbPUSHHB(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPHB Reads H and B to the Stack
func gbPOPHB(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHHC Writes H and C to the Stack
func gbPUSHHC(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPHC Reads H and C to the Stack
func gbPOPHC(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHHD Writes H and D to the Stack
func gbPUSHHD(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPHD Reads H and D to the Stack
func gbPOPHD(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHHE Writes H and E to the Stack
func gbPUSHHE(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPHE Reads H and E to the Stack
func gbPOPHE(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHHL Writes H and L to the Stack
func gbPUSHHL(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPHL Reads H and L to the Stack
func gbPOPHL(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHHF Writes H and F to the Stack
func gbPUSHHF(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPHF Reads H and F to the Stack
func gbPOPHF(cpu *Core) {

	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHLA Writes L and A to the Stack
func gbPUSHLA(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPLA Reads L and A to the Stack
func gbPOPLA(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHLB Writes L and B to the Stack
func gbPUSHLB(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPLB Reads L and B to the Stack
func gbPOPLB(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHLC Writes L and C to the Stack
func gbPUSHLC(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPLC Reads L and C to the Stack
func gbPOPLC(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHLD Writes L and D to the Stack
func gbPUSHLD(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPLD Reads L and D to the Stack
func gbPOPLD(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHLE Writes L and E to the Stack
func gbPUSHLE(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPLE Reads L and E to the Stack
func gbPOPLE(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHLH Writes L and H to the Stack
func gbPUSHLH(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPLH Reads L and H to the Stack
func gbPOPLH(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHLF Writes L and F to the Stack
func gbPUSHLF(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPLF Reads L and F to the Stack
func gbPOPLF(cpu *Core) {

	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHFA Writes F and A to the Stack
func gbPUSHFA(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPFA Reads F and A to the Stack
func gbPOPFA(cpu *Core) {

	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHFB Writes F and B to the Stack
func gbPUSHFB(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPFB Reads F and B to the Stack
func gbPOPFB(cpu *Core) {

	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHFC Writes F and C to the Stack
func gbPUSHFC(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPFC Reads F and C to the Stack
func gbPOPFC(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHFD Writes F and D to the Stack
func gbPUSHFD(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPFD Reads F and D to the Stack
func gbPOPFD(cpu *Core) {

	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHFE Writes F and E to the Stack
func gbPUSHFE(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPFE Reads F and E to the Stack
func gbPOPFE(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHFH Writes F and H to the Stack
func gbPUSHFH(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPFH Reads F and H to the Stack
func gbPOPFH(cpu *Core) {

	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHFL Writes F and L to the Stack
func gbPUSHFL(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPFL Reads F and L to the Stack
func gbPOPFL(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// endregion
// region Flow Control Instructions

func gbJPnn(cpu *Core) {
	cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

func gbJPHL(cpu *Core) {
	cpu.Registers.PC = cpu.Registers.HL()
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbJPNZnn(cpu *Core) {
	if cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
		cpu.Registers.PC += 2
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
		cpu.Registers.LastClockM = 4
		cpu.Registers.LastClockT = 16
	}
}

func gbJPZnn(cpu *Core) {
	if !cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
		cpu.Registers.PC += 2
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
		cpu.Registers.LastClockM = 4
		cpu.Registers.LastClockT = 16
	}
}

func gbJPNCnn(cpu *Core) {
	if cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
		cpu.Registers.PC += 2
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
		cpu.Registers.LastClockM = 4
		cpu.Registers.LastClockT = 16
	}
}

func gbJPCnn(cpu *Core) {
	if !cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
		cpu.Registers.PC += 2
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
		cpu.Registers.LastClockM = 4
		cpu.Registers.LastClockT = 16
	}
}

func gbJRn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	//if v > 127 {
	//    v = -((^v + 1) & 0xFF)
	//}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbJRNZn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	//if v > 127 {
	//    v = -((^v + 1) & 0xFF)
	//}

	if cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
		return
	}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbJRZn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	//if v > 127 {
	//    v = -((^v + 1) & 0xFF)
	//}

	if !cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
		return
	}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbJRNCn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	//if v > 127 {
	//    v = -((^v + 1) & 0xFF)
	//}

	if cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
		return
	}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbJRCn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	//if v > 127 {
	//    v = -((^v + 1) & 0xFF)
	//}

	if cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
		return
	}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbStop(cpu *Core) {
	cpu.stopped = true
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbCALLnn(cpu *Core) {
	cpu.Registers.SP -= 2
	cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
	cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

	cpu.Registers.LastClockM = 6
	cpu.Registers.LastClockT = 24
}

func gbCALLNZnn(cpu *Core) {
	if cpu.Registers.GetZero() {
		cpu.Registers.PC += 2
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
	} else {
		cpu.Registers.SP -= 2
		cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

		cpu.Registers.LastClockM = 6
		cpu.Registers.LastClockT = 24
	}
}

func gbCALLZnn(cpu *Core) {
	if !cpu.Registers.GetZero() {
		cpu.Registers.PC += 2
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
	} else {
		cpu.Registers.SP -= 2
		cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

		cpu.Registers.LastClockM = 6
		cpu.Registers.LastClockT = 24
	}
}

func gbCALLNCnn(cpu *Core) {
	if cpu.Registers.GetCarry() {
		cpu.Registers.PC += 2
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
	} else {
		cpu.Registers.SP -= 2
		cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

		cpu.Registers.LastClockM = 6
		cpu.Registers.LastClockT = 24
	}
}

func gbCALLCnn(cpu *Core) {
	if !cpu.Registers.GetCarry() {
		cpu.Registers.PC += 2
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
	} else {
		cpu.Registers.SP -= 2
		cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

		cpu.Registers.LastClockM = 6
		cpu.Registers.LastClockT = 24
	}
}

func gbRET(cpu *Core) {
	cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
	cpu.Registers.SP += 2

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

func gbRETI(cpu *Core) {
	cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
	cpu.Registers.SP += 2
	cpu.Registers.InterruptEnable = true

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

func gbRETNZ(cpu *Core) {
	if cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
		cpu.Registers.SP += 2

		cpu.Registers.LastClockM = 5
		cpu.Registers.LastClockT = 20
	}
}
func gbRETZ(cpu *Core) {
	if !cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
		cpu.Registers.SP += 2

		cpu.Registers.LastClockM = 5
		cpu.Registers.LastClockT = 20
	}
}

func gbRETNC(cpu *Core) {
	if cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
		cpu.Registers.SP += 2

		cpu.Registers.LastClockM = 5
		cpu.Registers.LastClockT = 20
	}
}

func gbRETC(cpu *Core) {
	if !cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
		cpu.Registers.SP += 2

		cpu.Registers.LastClockM = 5
		cpu.Registers.LastClockT = 20
	}
}

func gbDI(cpu *Core) {
	cpu.Registers.InterruptEnable = false
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbEI(cpu *Core) {
	cpu.Registers.InterruptEnable = true
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbNOP(cpu *Core) {
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbNOPWARN(cpu *Core, opcode int) {
	cpuLog.Warn("Opcode not implemented: 0x%02x at 0x%04x", opcode, cpu.Registers.PC-1)
	cpu.Registers.LastClockM = 0
	cpu.Registers.LastClockT = 0
	cpu.paused = true
}

func gbHALT(cpu *Core) {
	cpu.halted = true
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// endregion

var GBInstructions = []GBInstruction{
	// region 0x00 Group
	gbNOP,
	gbLDBCnn,
	gbLDBCmA,
	gbINCBC,
	gbINCrB,
	gbDECrB,
	gbLDrnB,
	gbRLCA,
	gbLDmmSP,
	gbADDHLBC,
	gbLDABCm,
	gbDECBC,
	gbINCrC,
	gbDECrC,
	gbLDrnC,
	gbRRCA,
	// endregion
	// region 0x10 Group
	gbStop,
	gbLDDEnn,
	gbLDDEmA,
	gbINCDE,
	gbINCrD,
	gbDECrD,
	gbLDrnD,
	gbRLA,
	gbJRn,
	gbADDHLDE,
	gbLDADEm,
	gbDECDE,
	gbINCrE,
	gbDECrE,
	gbLDrnE,
	gbRRA,
	// endregion
	// region 0x20 Group
	gbJRNZn,
	gbLDHLnn,
	gbLDHLIA,
	gbINCHL,
	gbINCrH,
	gbDECrH,
	gbLDrnH,
	gbDAA,
	gbJRZn,
	gbADDHLHL,
	gbLDAHLI,
	gbDECHL,
	gbINCrL,
	gbDECrL,
	gbLDrnL,
	gbCPL,
	// endregion
	// region 0x30 Group
	gbJRNCn,
	gbLDSPnn,
	gbLDHLDA,
	gbINCSP,
	gbINCHLm,
	gbDECHLm,
	gbLDHLmn,
	gbSCF,
	gbJRCn,
	gbADDHLSP,
	gbLDAHLD,
	gbDECSP,
	gbINCrA,
	gbDECrA,
	gbLDrnA,
	gbCCF,
	// endregion
	// region 0x40 Group
	gbLDrrBB,
	gbLDrrBC,
	gbLDrrBD,
	gbLDrrBE,
	gbLDrrBH,
	gbLDrrBL,
	gbLDrHLmB,
	gbLDrrBA,
	gbLDrrCB,
	gbLDrrCC,
	gbLDrrCD,
	gbLDrrCE,
	gbLDrrCH,
	gbLDrrCL,
	gbLDrHLmC,
	gbLDrrCA,
	// endregion
	// region 0x50 Group
	gbLDrrDB,
	gbLDrrDC,
	gbLDrrDD,
	gbLDrrDE,
	gbLDrrDH,
	gbLDrrDL,
	gbLDrHLmD,
	gbLDrrDA,
	gbLDrrEB,
	gbLDrrEC,
	gbLDrrED,
	gbLDrrEE,
	gbLDrrEH,
	gbLDrrEL,
	gbLDrHLmE,
	gbLDrrEA,
	// endregion
	// region 0x60 Group
	gbLDrrHB,
	gbLDrrHC,
	gbLDrrHD,
	gbLDrrHE,
	gbLDrrHH,
	gbLDrrHL,
	gbLDrHLmH,
	gbLDrrHA,
	gbLDrrLB,
	gbLDrrLC,
	gbLDrrLD,
	gbLDrrLE,
	gbLDrrLH,
	gbLDrrLL,
	gbLDrHLmL,
	gbLDrrLA,
	// endregion
	// region 0x70 Group
	gbLDHLmrB,
	gbLDHLmrC,
	gbLDHLmrD,
	gbLDHLmrE,
	gbLDHLmrH,
	gbLDHLmrL,
	gbHALT,
	gbLDHLmrA,
	gbLDrrAB,
	gbLDrrAC,
	gbLDrrAD,
	gbLDrrAE,
	gbLDrrAH,
	gbLDrrAL,
	gbLDrHLmA,
	gbLDrrAA,
	// endregion
	// region 0x80 Group
	gbADDrB,
	gbADDrC,
	gbADDrD,
	gbADDrE,
	gbADDrH,
	gbADDrL,
	gbADDHL,
	gbADDrA,
	gbADCrB,
	gbADCrC,
	gbADCrD,
	gbADCrE,
	gbADCrH,
	gbADCrL,
	gbADCHL,
	gbADCrA,
	// endregion
	// region 0x90 Group
	gbSUBrB,
	gbSUBrC,
	gbSUBrD,
	gbSUBrE,
	gbSUBrH,
	gbSUBrL,
	gbSUBHL,
	gbSUBrA,
	gbSBCrB,
	gbSBCrC,
	gbSBCrD,
	gbSBCrE,
	gbSBCrH,
	gbSBCrL,
	gbSBCHL,
	gbSBCrA,
	// endregion
	// region 0xA0 Group
	gbANDrB,
	gbANDrC,
	gbANDrD,
	gbANDrE,
	gbANDrH,
	gbANDrL,
	gbANDHL,
	gbANDrA,
	gbXORrB,
	gbXORrC,
	gbXORrD,
	gbXORrE,
	gbXORrH,
	gbXORrL,
	gbXORHL,
	gbXORrA,
	// endregion
	// region 0xB0 Group
	gbORrB,
	gbORrC,
	gbORrD,
	gbORrE,
	gbORrH,
	gbORrL,
	gbORHL,
	gbORrA,
	gbCPrB,
	gbCPrC,
	gbCPrD,
	gbCPrE,
	gbCPrH,
	gbCPrL,
	gbCPHL,
	gbCPrA,
	// endregion
	// region 0xC0 Group
	gbRETNZ,
	gbPOPBC,
	gbJPNZnn,
	gbJPnn,
	gbCALLNZnn,
	gbPUSHBC,
	gbADDn,
	func(cpu *Core) { gbRSTXX(cpu, 0x00) },
	gbRETZ,
	gbRET,
	gbJPZnn,
	gbCBCall,
	gbCALLZnn,
	gbCALLnn,
	gbADCn,
	func(cpu *Core) { gbRSTXX(cpu, 0x08) },
	// endregion
	// region 0xD0 Group
	gbRETNC,
	gbPOPDE,
	gbJPNCnn,
	func(cpu *Core) { gbNOPWARN(cpu, 0xD3) },
	gbCALLNCnn,
	gbPUSHDE,
	gbSUBn,
	func(cpu *Core) { gbRSTXX(cpu, 0x10) },
	gbRETC,
	gbRETI,
	gbJPCnn,
	func(cpu *Core) { gbNOPWARN(cpu, 0xDB) },
	gbCALLCnn,
	func(cpu *Core) { gbNOPWARN(cpu, 0xDD) },
	gbSBCn,
	func(cpu *Core) { gbRSTXX(cpu, 0x18) },
	// endregion
	// region 0xE0 Group
	gbLDIOnA,
	gbPOPHL,
	gbLDIOCA,
	func(cpu *Core) { gbNOPWARN(cpu, 0xE3) },
	func(cpu *Core) { gbNOPWARN(cpu, 0xE4) },
	gbPUSHHL,
	gbANDn,
	func(cpu *Core) { gbRSTXX(cpu, 0x20) },
	gbADDSPn,
	gbJPHL,
	gbLDmmA,
	func(cpu *Core) { gbNOPWARN(cpu, 0xEB) },
	func(cpu *Core) { gbNOPWARN(cpu, 0xEC) },
	func(cpu *Core) { gbNOPWARN(cpu, 0xED) },
	gbXORn,
	func(cpu *Core) { gbRSTXX(cpu, 0x28) },
	// endregion
	// region 0xF0 Group
	gbLDAIOn,
	gbPOPAF,
	gbLDAIOC,
	gbDI,
	func(cpu *Core) { gbNOPWARN(cpu, 0xF4) },
	gbPUSHAF,
	gbORn,
	func(cpu *Core) { gbRSTXX(cpu, 0x30) },
	gbLDHLSPn,
	gbLDHLSPr,
	gbLDAmm,
	gbEI,
	func(cpu *Core) { gbNOPWARN(cpu, 0xFC) },
	func(cpu *Core) { gbNOPWARN(cpu, 0xFD) },
	gbCPn,
	func(cpu *Core) { gbRSTXX(cpu, 0x38) },
	// endregion
}
