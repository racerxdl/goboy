// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2019-07-04 00:24:39.680044386 -0300 -03 m=+0.007457334
package cpu

// region Load/Store Instructions

// gbLDrrAA Sets Register A to the value in A
func gbLDrrAA(cpu *Core) {
	cpu.Registers.A = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAB Sets Register B to the value in A
func gbLDrrAB(cpu *Core) {
	cpu.Registers.A = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAC Sets Register C to the value in A
func gbLDrrAC(cpu *Core) {
	cpu.Registers.A = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAD Sets Register D to the value in A
func gbLDrrAD(cpu *Core) {
	cpu.Registers.A = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAE Sets Register E to the value in A
func gbLDrrAE(cpu *Core) {
	cpu.Registers.A = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAH Sets Register H to the value in A
func gbLDrrAH(cpu *Core) {
	cpu.Registers.A = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrAL Sets Register L to the value in A
func gbLDrrAL(cpu *Core) {
	cpu.Registers.A = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBA Sets Register A to the value in B
func gbLDrrBA(cpu *Core) {
	cpu.Registers.B = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBB Sets Register B to the value in B
func gbLDrrBB(cpu *Core) {
	cpu.Registers.B = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBC Sets Register C to the value in B
func gbLDrrBC(cpu *Core) {
	cpu.Registers.B = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBD Sets Register D to the value in B
func gbLDrrBD(cpu *Core) {
	cpu.Registers.B = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBE Sets Register E to the value in B
func gbLDrrBE(cpu *Core) {
	cpu.Registers.B = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBH Sets Register H to the value in B
func gbLDrrBH(cpu *Core) {
	cpu.Registers.B = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrBL Sets Register L to the value in B
func gbLDrrBL(cpu *Core) {
	cpu.Registers.B = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCA Sets Register A to the value in C
func gbLDrrCA(cpu *Core) {
	cpu.Registers.C = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCB Sets Register B to the value in C
func gbLDrrCB(cpu *Core) {
	cpu.Registers.C = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCC Sets Register C to the value in C
func gbLDrrCC(cpu *Core) {
	cpu.Registers.C = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCD Sets Register D to the value in C
func gbLDrrCD(cpu *Core) {
	cpu.Registers.C = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCE Sets Register E to the value in C
func gbLDrrCE(cpu *Core) {
	cpu.Registers.C = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCH Sets Register H to the value in C
func gbLDrrCH(cpu *Core) {
	cpu.Registers.C = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrCL Sets Register L to the value in C
func gbLDrrCL(cpu *Core) {
	cpu.Registers.C = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDA Sets Register A to the value in D
func gbLDrrDA(cpu *Core) {
	cpu.Registers.D = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDB Sets Register B to the value in D
func gbLDrrDB(cpu *Core) {
	cpu.Registers.D = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDC Sets Register C to the value in D
func gbLDrrDC(cpu *Core) {
	cpu.Registers.D = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDD Sets Register D to the value in D
func gbLDrrDD(cpu *Core) {
	cpu.Registers.D = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDE Sets Register E to the value in D
func gbLDrrDE(cpu *Core) {
	cpu.Registers.D = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDH Sets Register H to the value in D
func gbLDrrDH(cpu *Core) {
	cpu.Registers.D = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrDL Sets Register L to the value in D
func gbLDrrDL(cpu *Core) {
	cpu.Registers.D = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEA Sets Register A to the value in E
func gbLDrrEA(cpu *Core) {
	cpu.Registers.E = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEB Sets Register B to the value in E
func gbLDrrEB(cpu *Core) {
	cpu.Registers.E = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEC Sets Register C to the value in E
func gbLDrrEC(cpu *Core) {
	cpu.Registers.E = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrED Sets Register D to the value in E
func gbLDrrED(cpu *Core) {
	cpu.Registers.E = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEE Sets Register E to the value in E
func gbLDrrEE(cpu *Core) {
	cpu.Registers.E = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEH Sets Register H to the value in E
func gbLDrrEH(cpu *Core) {
	cpu.Registers.E = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrEL Sets Register L to the value in E
func gbLDrrEL(cpu *Core) {
	cpu.Registers.E = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHA Sets Register A to the value in H
func gbLDrrHA(cpu *Core) {
	cpu.Registers.H = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHB Sets Register B to the value in H
func gbLDrrHB(cpu *Core) {
	cpu.Registers.H = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHC Sets Register C to the value in H
func gbLDrrHC(cpu *Core) {
	cpu.Registers.H = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHD Sets Register D to the value in H
func gbLDrrHD(cpu *Core) {
	cpu.Registers.H = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHE Sets Register E to the value in H
func gbLDrrHE(cpu *Core) {
	cpu.Registers.H = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHH Sets Register H to the value in H
func gbLDrrHH(cpu *Core) {
	cpu.Registers.H = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrHL Sets Register L to the value in H
func gbLDrrHL(cpu *Core) {
	cpu.Registers.H = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLA Sets Register A to the value in L
func gbLDrrLA(cpu *Core) {
	cpu.Registers.L = cpu.Registers.A
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLB Sets Register B to the value in L
func gbLDrrLB(cpu *Core) {
	cpu.Registers.L = cpu.Registers.B
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLC Sets Register C to the value in L
func gbLDrrLC(cpu *Core) {
	cpu.Registers.L = cpu.Registers.C
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLD Sets Register D to the value in L
func gbLDrrLD(cpu *Core) {
	cpu.Registers.L = cpu.Registers.D
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLE Sets Register E to the value in L
func gbLDrrLE(cpu *Core) {
	cpu.Registers.L = cpu.Registers.E
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLH Sets Register H to the value in L
func gbLDrrLH(cpu *Core) {
	cpu.Registers.L = cpu.Registers.H
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrrLL Sets Register L to the value in L
func gbLDrrLL(cpu *Core) {
	cpu.Registers.L = cpu.Registers.L
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbLDrHLmA Sets A to [HL]
func gbLDrHLmA(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmB Sets B to [HL]
func gbLDrHLmB(cpu *Core) {
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmC Sets C to [HL]
func gbLDrHLmC(cpu *Core) {
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmD Sets D to [HL]
func gbLDrHLmD(cpu *Core) {
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmE Sets E to [HL]
func gbLDrHLmE(cpu *Core) {
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmH Sets H to [HL]
func gbLDrHLmH(cpu *Core) {
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrHLmL Sets L to [HL]
func gbLDrHLmL(cpu *Core) {
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrA Sets [HL] to A
func gbLDHLmrA(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrB Sets [HL] to B
func gbLDHLmrB(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.B)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrC Sets [HL] to C
func gbLDHLmrC(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.C)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrD Sets [HL] to D
func gbLDHLmrD(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.D)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrE Sets [HL] to E
func gbLDHLmrE(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.E)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrH Sets [HL] to H
func gbLDHLmrH(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.H)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLmrL Sets [HL] to L
func gbLDHLmrL(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.L)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnA Loads a byte from Program Memory into A. Increments PC
func gbLDrnA(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnB Loads a byte from Program Memory into B. Increments PC
func gbLDrnB(cpu *Core) {
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnC Loads a byte from Program Memory into C. Increments PC
func gbLDrnC(cpu *Core) {
	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnD Loads a byte from Program Memory into D. Increments PC
func gbLDrnD(cpu *Core) {
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnE Loads a byte from Program Memory into E. Increments PC
func gbLDrnE(cpu *Core) {
	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnH Loads a byte from Program Memory into H. Increments PC
func gbLDrnH(cpu *Core) {
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDrnL Loads a byte from Program Memory into L. Increments PC
func gbLDrnL(cpu *Core) {
	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// LDHLmn Writes byte from Program Memory into Memory (H/L). Increments Program Counter
func gbLDHLmn(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Memory.ReadByte(cpu.Registers.PC))
	cpu.Registers.PC++
	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// LDSPnn Reads word from Program Counter and stores in SP
func gbLDSPnn(cpu *Core) {
	cpu.Registers.SP = cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// LDmmSP
func gbLDmmSP(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Memory.WriteWord(addr, cpu.Registers.SP)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 5
	cpu.Registers.LastClockT = 20
}

// LDAIOC
func gbLDAIOC(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(0xFF00 + uint16(cpu.Registers.C))
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// LDIOCA
func gbLDIOCA(cpu *Core) {
	cpu.Memory.WriteByte(0xFF00+uint16(cpu.Registers.C), cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// LDHLSPn
func gbLDHLSPn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	cpu.Registers.SetZero(false)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.SP&0xF)+(v&0xF) > 0xF)
	cpu.Registers.SetCarry(int(cpu.Registers.SP&0xFF)+(v&0xFF) > 0xFF)

	v += int(cpu.Registers.SP)

	cpu.Registers.H = uint8(uint(v) >> 8)
	cpu.Registers.L = uint8(uint(v) & 0xFF)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// LDHLSPr
func gbLDHLSPr(cpu *Core) {
	cpu.Registers.SP = cpu.Registers.HL()
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDHLDA Sets A to [HL] and decrements HL.
func gbLDHLDA(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.A)
	cpu.Registers.L--
	if cpu.Registers.L == 255 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHLI Reads byte from [HL] into A and increments H/L
func gbLDAHLI(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAHLD Reads byte from [HL] into A and decrements H/L
func gbLDAHLD(cpu *Core) {
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.HL())
	cpu.Registers.L--
	if cpu.Registers.L == 255 {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDBCmA Writes value of register A to [B << 8 + C]
func gbLDBCmA(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDDEmA Writes value of register A to [D << 8 + E]
func gbLDDEmA(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Memory.WriteByte(hl, cpu.Registers.A)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDmmA Writes register A to memory pointed by PC
func gbLDmmA(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Memory.ReadWord(cpu.Registers.PC), cpu.Registers.A)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDABCm  Sets A to [B << 8 + C]
func gbLDABCm(cpu *Core) {
	hl := (uint16(cpu.Registers.B) << 8) + uint16(cpu.Registers.C)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDADEm  Sets A to [D << 8 + E]
func gbLDADEm(cpu *Core) {
	hl := (uint16(cpu.Registers.D) << 8) + uint16(cpu.Registers.E)
	cpu.Registers.A = cpu.Memory.ReadByte(hl)
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAmm Writes register A to memory pointed by PC
func gbLDAmm(cpu *Core) {
	addr := cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.A = cpu.Memory.ReadByte(addr)
	cpu.Registers.PC += 2
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbLDHLnn Reads [PC] to L and [PC+1] to H
func gbLDHLnn(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDBCnn Reads [PC] to C and [PC+1] to B
func gbLDBCnn(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDDEnn Reads [PC] to E and [PC+1] to D
func gbLDDEnn(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDHLIA Sets A to [HL] and increments HL.
func gbLDHLIA(cpu *Core) {
	cpu.Memory.WriteByte(cpu.Registers.HL(), cpu.Registers.A)
	cpu.Registers.L++
	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}
	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbLDAIOn
func gbLDAIOn(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Registers.A = cpu.Memory.ReadByte(0xFF00 + uint16(addr))

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbLDIOnA
func gbLDIOnA(cpu *Core) {
	addr := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	cpu.Memory.WriteByte(0xFF00+uint16(addr), cpu.Registers.A)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// endregion
// region Data Processing Instructions

// gbADDrA Adds A to A
func gbADDrA(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.A)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.A&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrA Sets A to A + A + FlagCarry
func gbADCrA(cpu *Core) {
	b := int(cpu.Registers.A)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrB Adds B to A
func gbADDrB(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.B)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.B&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrB Sets A to A + B + FlagCarry
func gbADCrB(cpu *Core) {
	b := int(cpu.Registers.B)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrC Adds C to A
func gbADDrC(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.C)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.C&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrC Sets A to A + C + FlagCarry
func gbADCrC(cpu *Core) {
	b := int(cpu.Registers.C)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrD Adds D to A
func gbADDrD(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.D)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.D&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrD Sets A to A + D + FlagCarry
func gbADCrD(cpu *Core) {
	b := int(cpu.Registers.D)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrE Adds E to A
func gbADDrE(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.E)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.E&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrE Sets A to A + E + FlagCarry
func gbADCrE(cpu *Core) {
	b := int(cpu.Registers.E)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrH Adds H to A
func gbADDrH(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.H)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.H&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrH Sets A to A + H + FlagCarry
func gbADCrH(cpu *Core) {
	b := int(cpu.Registers.H)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDrL Adds L to A
func gbADDrL(cpu *Core) {
	sum := uint16(cpu.Registers.A) + uint16(cpu.Registers.L)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(cpu.Registers.L&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADCrL Sets A to A + L + FlagCarry
func gbADCrL(cpu *Core) {
	b := int(cpu.Registers.L)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) + b + f

	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbADDHLBC Adds (B << 8) + C to HL
func gbADDHLBC(cpu *Core) {
	BC := int(cpu.Registers.B)<<8 + int(cpu.Registers.C)
	sum := BC + int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((uint16(BC) & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLDE Adds (D << 8) + E to HL
func gbADDHLDE(cpu *Core) {
	DE := int(cpu.Registers.D)<<8 + int(cpu.Registers.E)
	sum := DE + int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((uint16(DE) & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLHL Adds (H << 8) + L to HL
func gbADDHLHL(cpu *Core) {
	HL := int(cpu.Registers.H)<<8 + int(cpu.Registers.L)
	sum := HL + int(cpu.Registers.HL())

	cpu.Registers.SetCarry(sum > 65535)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((uint16(HL) & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHL Adds byte from [HL] to A
func gbADDHL(cpu *Core) {
	z := cpu.Memory.ReadByte(cpu.Registers.HL())
	sum := uint16(cpu.Registers.A) + uint16(z)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(z&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDn Adds byte from [PC] to A
func gbADDn(cpu *Core) {
	z := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	sum := uint16(cpu.Registers.A) + uint16(z)

	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((cpu.Registers.A&0xF)+(z&0xF) > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDHLSP Adds SP to HL
func gbADDHLSP(cpu *Core) {
	sum := int(cpu.Registers.HL()) + int(cpu.Registers.SP)
	cpu.Registers.SetCarry(sum > 65535)

	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(((cpu.Registers.SP & 0xFFF) + (cpu.Registers.HL() & 0xFFF)) > 0xFFF)

	cpu.Registers.H = uint8(sum >> 8)
	cpu.Registers.L = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADDSPn Reads a signed byte from [PC] and adds to SP
func gbADDSPn(cpu *Core) {
	a := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	cpu.Registers.SetZero(false)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetCarry(int(cpu.Registers.SP&0xFF)+(a&0xFF) > 0xFF)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.SP&0xF)+(a&0xF) > 0xF)

	cpu.Registers.SP = uint16(int(cpu.Registers.SP) + a)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbADCHL Sets A to A + [HL] + FlagCarry
func gbADCHL(cpu *Core) {
	a := int(cpu.Registers.A)
	b := int(cpu.Memory.ReadByte(cpu.Registers.HL()))

	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := a + b + f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(a&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbADCn Sets A to A + [PC] + FlagCarry
func gbADCn(cpu *Core) {
	a := int(cpu.Registers.A)
	b := int(cpu.Memory.ReadByte(cpu.Registers.PC))
	cpu.Registers.PC++

	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := a + b + f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum > 255)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(int(a&0xF)+(b&0xF)+f > 0xF)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBrA Subtracts A to A
func gbSUBrA(cpu *Core) {
	sum := int(cpu.Registers.A) - int(cpu.Registers.A)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.A & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrA Sets A to A - A - FlagCarry
func gbSBCrA(cpu *Core) {
	b := int(cpu.Registers.A)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrB Subtracts B to A
func gbSUBrB(cpu *Core) {
	sum := int(cpu.Registers.A) - int(cpu.Registers.B)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.B & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrB Sets A to A - B - FlagCarry
func gbSBCrB(cpu *Core) {
	b := int(cpu.Registers.B)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrC Subtracts C to A
func gbSUBrC(cpu *Core) {
	sum := int(cpu.Registers.A) - int(cpu.Registers.C)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.C & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrC Sets A to A - C - FlagCarry
func gbSBCrC(cpu *Core) {
	b := int(cpu.Registers.C)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrD Subtracts D to A
func gbSUBrD(cpu *Core) {
	sum := int(cpu.Registers.A) - int(cpu.Registers.D)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.D & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrD Sets A to A - D - FlagCarry
func gbSBCrD(cpu *Core) {
	b := int(cpu.Registers.D)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrE Subtracts E to A
func gbSUBrE(cpu *Core) {
	sum := int(cpu.Registers.A) - int(cpu.Registers.E)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.E & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrE Sets A to A - E - FlagCarry
func gbSBCrE(cpu *Core) {
	b := int(cpu.Registers.E)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrH Subtracts H to A
func gbSUBrH(cpu *Core) {
	sum := int(cpu.Registers.A) - int(cpu.Registers.H)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.H & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrH Sets A to A - H - FlagCarry
func gbSBCrH(cpu *Core) {
	b := int(cpu.Registers.H)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBrL Subtracts L to A
func gbSUBrL(cpu *Core) {
	sum := int(cpu.Registers.A) - int(cpu.Registers.L)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.L & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSBCrL Sets A to A - L - FlagCarry
func gbSBCrL(cpu *Core) {
	b := int(cpu.Registers.L)
	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := int(cpu.Registers.A) - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(cpu.Registers.A&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum & 0xFF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbSUBHL Subtracts byte from [HL] to A
func gbSUBHL(cpu *Core) {
	z := cpu.Memory.ReadByte(cpu.Registers.HL())
	sum := int(cpu.Registers.A) - int(z)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (z & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSUBn Subtracts byte from [PC] to A
func gbSUBn(cpu *Core) {
	z := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++
	sum := int(cpu.Registers.A) - int(z)

	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetZero(sum&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (z & 0xF))

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSBCHL Sets A to A - [HL] - FlagCarry
func gbSBCHL(cpu *Core) {
	a := int(cpu.Registers.A)
	b := int(cpu.Memory.ReadByte(cpu.Registers.HL()))

	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := a - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(a&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbSBCn Sets A to A - [PC] - FlagCarry
func gbSBCn(cpu *Core) {
	a := int(cpu.Registers.A)
	b := int(cpu.Memory.ReadByte(cpu.Registers.PC))
	cpu.Registers.PC++

	f := 0
	if cpu.Registers.GetCarry() {
		f = 1
	}

	sum := a - b - f

	cpu.Registers.SetZero((sum & 0xFF) == 0)
	cpu.Registers.SetCarry(sum < 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry(int(a&0xF) < (b&0xF)+f)

	cpu.Registers.A = uint8(sum)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbCPrA Checks if A == A
func gbCPrA(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.A)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.A)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.A & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrB Checks if B == A
func gbCPrB(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.B)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.B)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.B & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrC Checks if C == A
func gbCPrC(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.C)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.C)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.C & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrD Checks if D == A
func gbCPrD(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.D)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.D)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.D & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrE Checks if E == A
func gbCPrE(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.E)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.E)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.E & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrH Checks if H == A
func gbCPrH(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.H)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.H)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.H & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPrL Checks if L == A
func gbCPrL(cpu *Core) {
	cpu.Registers.SetCarry(cpu.Registers.A < cpu.Registers.L)
	cpu.Registers.SetZero(cpu.Registers.A == cpu.Registers.L)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (cpu.Registers.L & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPHL Compares byte from [HL] to A
func gbCPHL(cpu *Core) {
	b := cpu.Memory.ReadByte(cpu.Registers.HL())

	cpu.Registers.SetCarry(cpu.Registers.A < b)
	cpu.Registers.SetZero(cpu.Registers.A == b)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (b & 0xF))

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbCPn Compares byte from [PC] to A
func gbCPn(cpu *Core) {
	b := cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.SetCarry(cpu.Registers.A < b)
	cpu.Registers.SetZero(cpu.Registers.A == b)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((cpu.Registers.A & 0xF) < (b & 0xF))

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbANDrA Sets A to A & A
func gbANDrA(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.A

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrA Sets A to A | A
func gbORrA(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.A

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrA Sets A to A | A
func gbXORrA(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.A

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrB Sets A to A & B
func gbANDrB(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.B

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrB Sets A to A | B
func gbORrB(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.B

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrB Sets A to A | B
func gbXORrB(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.B

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrC Sets A to A & C
func gbANDrC(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.C

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrC Sets A to A | C
func gbORrC(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.C

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrC Sets A to A | C
func gbXORrC(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.C

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrD Sets A to A & D
func gbANDrD(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.D

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrD Sets A to A | D
func gbORrD(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.D

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrD Sets A to A | D
func gbXORrD(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.D

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrE Sets A to A & E
func gbANDrE(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.E

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrE Sets A to A | E
func gbORrE(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.E

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrE Sets A to A | E
func gbXORrE(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.E

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrH Sets A to A & H
func gbANDrH(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.H

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrH Sets A to A | H
func gbORrH(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.H

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrH Sets A to A | H
func gbXORrH(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.H

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDrL Sets A to A & L
func gbANDrL(cpu *Core) {
	cpu.Registers.A &= cpu.Registers.L

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbORrL Sets A to A | L
func gbORrL(cpu *Core) {
	cpu.Registers.A |= cpu.Registers.L

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbXORrL Sets A to A | L
func gbXORrL(cpu *Core) {
	cpu.Registers.A ^= cpu.Registers.L

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDAA
func gbDAA(cpu *Core) {
	a := int(cpu.Registers.A)

	if cpu.Registers.GetSub() {
		if cpu.Registers.GetHalfCarry() {
			a -= 0x6
		} else {
			a -= 0x60
		}
	} else {
		if cpu.Registers.GetHalfCarry() || (a&0xF) > 0x9 {
			a += 0x6
		} else {
			a += 0x60
		}
	}

	cpu.Registers.A = uint8(a)

	cpu.Registers.SetZero((a & 0xFF) == 0)
	cpu.Registers.SetHalfCarry(false)

	if a&0x100 == 0x100 {
		cpu.Registers.SetCarry(true)
	}

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbANDHL Sets A to A & [HL]
func gbANDHL(cpu *Core) {
	cpu.Registers.A &= cpu.Memory.ReadByte(cpu.Registers.HL())

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbANDn Sets A to A & [PC]
func gbANDn(cpu *Core) {
	cpu.Registers.A &= cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(true)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbORHL Sets A to A | [HL]
func gbORHL(cpu *Core) {
	cpu.Registers.A |= cpu.Memory.ReadByte(cpu.Registers.HL())

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbORn Sets A to A | [PC]
func gbORn(cpu *Core) {
	cpu.Registers.A |= cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbXORHL Sets A to A ^ [HL]
func gbXORHL(cpu *Core) {
	cpu.Registers.A ^= cpu.Memory.ReadByte(cpu.Registers.HL())

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbXORn Sets A to A ^ [PC]
func gbXORn(cpu *Core) {
	cpu.Registers.A ^= cpu.Memory.ReadByte(cpu.Registers.PC)
	cpu.Registers.PC++

	cpu.Registers.SetCarry(false)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry(false)

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCrA Sets A to A + 1
func gbINCrA(cpu *Core) {
	v := cpu.Registers.A
	cpu.Registers.A++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrA Sets A to A - 1
func gbDECrA(cpu *Core) {
	v := cpu.Registers.A
	cpu.Registers.A--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.A == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrB Sets B to B + 1
func gbINCrB(cpu *Core) {
	v := cpu.Registers.B
	cpu.Registers.B++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.B == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrB Sets B to B - 1
func gbDECrB(cpu *Core) {
	v := cpu.Registers.B
	cpu.Registers.B--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.B == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrC Sets C to C + 1
func gbINCrC(cpu *Core) {
	v := cpu.Registers.C
	cpu.Registers.C++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.C == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrC Sets C to C - 1
func gbDECrC(cpu *Core) {
	v := cpu.Registers.C
	cpu.Registers.C--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.C == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrD Sets D to D + 1
func gbINCrD(cpu *Core) {
	v := cpu.Registers.D
	cpu.Registers.D++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.D == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrD Sets D to D - 1
func gbDECrD(cpu *Core) {
	v := cpu.Registers.D
	cpu.Registers.D--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.D == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrE Sets E to E + 1
func gbINCrE(cpu *Core) {
	v := cpu.Registers.E
	cpu.Registers.E++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.E == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrE Sets E to E - 1
func gbDECrE(cpu *Core) {
	v := cpu.Registers.E
	cpu.Registers.E--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.E == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrH Sets H to H + 1
func gbINCrH(cpu *Core) {
	v := cpu.Registers.H
	cpu.Registers.H++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.H == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrH Sets H to H - 1
func gbDECrH(cpu *Core) {
	v := cpu.Registers.H
	cpu.Registers.H--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.H == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCrL Sets L to L + 1
func gbINCrL(cpu *Core) {
	v := cpu.Registers.L
	cpu.Registers.L++

	//cpu.Registers.SetCarry(int(v) + 1 > 255)
	cpu.Registers.SetZero(cpu.Registers.L == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbDECrL Sets L to L - 1
func gbDECrL(cpu *Core) {
	v := cpu.Registers.L
	cpu.Registers.L--

	//cpu.Registers.SetCarry(int(v) - 1 < 0)
	cpu.Registers.SetZero(cpu.Registers.L == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// gbINCBC Sets ( B << 8 + C ) to (  B << 8 + C ) + 1
func gbINCBC(cpu *Core) {
	cpu.Registers.C++

	if cpu.Registers.C == 0 {
		cpu.Registers.B++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECBC Sets ( B << 8 + C ) to ( B << 8 + C ) - 1
func gbDECBC(cpu *Core) {
	cpu.Registers.C--

	if cpu.Registers.C == 0xFF {
		cpu.Registers.B--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCDE Sets ( D << 8 + E ) to (  D << 8 + E ) + 1
func gbINCDE(cpu *Core) {
	cpu.Registers.E++

	if cpu.Registers.E == 0 {
		cpu.Registers.D++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECDE Sets ( D << 8 + E ) to ( D << 8 + E ) - 1
func gbDECDE(cpu *Core) {
	cpu.Registers.E--

	if cpu.Registers.E == 0xFF {
		cpu.Registers.D--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHL Sets ( H << 8 + L ) to (  H << 8 + L ) + 1
func gbINCHL(cpu *Core) {
	cpu.Registers.L++

	if cpu.Registers.L == 0 {
		cpu.Registers.H++
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbDECHL Sets ( H << 8 + L ) to ( H << 8 + L ) - 1
func gbDECHL(cpu *Core) {
	cpu.Registers.L--

	if cpu.Registers.L == 0xFF {
		cpu.Registers.H--
	}

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCHLm Sets [HL] to [HL] + 1
func gbINCHLm(cpu *Core) {
	v := int(cpu.Memory.ReadByte(cpu.Registers.HL()))
	cpu.Memory.WriteByte(cpu.Registers.HL(), uint8(v+1))

	cpu.Registers.SetZero(((v + 1) & 0xFF) == 0)
	cpu.Registers.SetSub(false)
	cpu.Registers.SetHalfCarry((v&0xF)+1 > 0xF)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbDECHLm Sets [HL] to [HL] - 1
func gbDECHLm(cpu *Core) {
	v := int(cpu.Memory.ReadByte(cpu.Registers.HL()))
	cpu.Memory.WriteByte(cpu.Registers.HL(), uint8(v-1))

	cpu.Registers.SetZero((v-1)&0xFF == 0)
	cpu.Registers.SetSub(true)
	cpu.Registers.SetHalfCarry((v & 0xF) == 0)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbDECSP Sets SP = SP - 1
func gbDECSP(cpu *Core) {
	cpu.Registers.SP--

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// gbINCSP Sets SP = SP + 1
func gbINCSP(cpu *Core) {
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 2
	cpu.Registers.LastClockT = 8
}

// endregion
// region Bit Manipulation Instructions

func gbRLA(cpu *Core) {
	c := (cpu.Registers.A >> 7) > 0
	f := uint8(0)
	if cpu.Registers.GetCarry() {
		f = 1
	}

	cpu.Registers.A = (cpu.Registers.A << 1) | f

	cpu.Registers.SetCarry(c)
	cpu.Registers.SetZero(false)
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbRLCA(cpu *Core) {
	c := (cpu.Registers.A >> 7) & 0x1
	cpu.Registers.A = (cpu.Registers.A << 1) | c

	cpu.Registers.SetCarry(c > 0)
	cpu.Registers.SetZero(false)
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbRRA(cpu *Core) {
	c := cpu.Registers.A & 0x1
	f := byte(0)
	if cpu.Registers.GetCarry() {
		f = 1
	}

	cpu.Registers.A = (cpu.Registers.A >> 1) | (f << 7)

	cpu.Registers.SetCarry(c > 0)
	cpu.Registers.SetZero(false)
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbRRCA(cpu *Core) {
	c := cpu.Registers.A & 0x1

	cpu.Registers.A = (cpu.Registers.A >> 1) | (c << 7)

	cpu.Registers.SetCarry(c > 0)
	cpu.Registers.SetZero(false)
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbCPL(cpu *Core) {
	cpu.Registers.A = ^cpu.Registers.A

	cpu.Registers.SetHalfCarry(true)
	cpu.Registers.SetSub(true)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}
func gbCCF(cpu *Core) {
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetCarry(!cpu.Registers.GetCarry())
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbSCF(cpu *Core) {
	cpu.Registers.SetHalfCarry(false)
	cpu.Registers.SetCarry(true)
	cpu.Registers.SetSub(false)

	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// endregion
// region Interrupt Calls Instructions

// gbRSTXX Triggers the Interrupt at XX
func gbRSTXX(cpu *Core, addr uint16) {
	cpu.Registers.SaveRegisters()
	cpu.Registers.SP -= 2
	cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC)
	cpu.Registers.PC = addr

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// endregion
// region Stack Management Instructions

// gbPUSHAF Writes A and F to the Stack
func gbPUSHAF(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.A)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.F)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPAF Reads A and F to the Stack
func gbPOPAF(cpu *Core) {

	cpu.Registers.F = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.A = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHBC Writes B and C to the Stack
func gbPUSHBC(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.B)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.C)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPBC Reads B and C to the Stack
func gbPOPBC(cpu *Core) {

	cpu.Registers.C = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.B = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHDE Writes D and E to the Stack
func gbPUSHDE(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.D)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.E)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPDE Reads D and E to the Stack
func gbPOPDE(cpu *Core) {

	cpu.Registers.E = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.D = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// gbPUSHHL Writes H and L to the Stack
func gbPUSHHL(cpu *Core) {
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.H)
	cpu.Registers.SP--
	cpu.Memory.WriteByte(cpu.Registers.SP, cpu.Registers.L)

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

// gbPOPHL Reads H and L to the Stack
func gbPOPHL(cpu *Core) {

	cpu.Registers.L = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++
	cpu.Registers.H = cpu.Memory.ReadByte(cpu.Registers.SP)
	cpu.Registers.SP++

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

// endregion
// region Flow Control Instructions

func gbJPnn(cpu *Core) {
	cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

func gbJPHL(cpu *Core) {
	cpu.Registers.PC = cpu.Registers.HL()
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbJPNZnn(cpu *Core) {
	if cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
		cpu.Registers.PC += 2
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
		cpu.Registers.LastClockM = 4
		cpu.Registers.LastClockT = 16
	}
}

func gbJPZnn(cpu *Core) {
	if !cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
		cpu.Registers.PC += 2
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
		cpu.Registers.LastClockM = 4
		cpu.Registers.LastClockT = 16
	}
}

func gbJPNCnn(cpu *Core) {
	if cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
		cpu.Registers.PC += 2
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
		cpu.Registers.LastClockM = 4
		cpu.Registers.LastClockT = 16
	}
}

func gbJPCnn(cpu *Core) {
	if !cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
		cpu.Registers.PC += 2
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)
		cpu.Registers.LastClockM = 4
		cpu.Registers.LastClockT = 16
	}
}

func gbJRn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbJRNZn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	if cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
		return
	}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbJRZn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	if !cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
		return
	}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbJRNCn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	if cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
		return
	}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbJRCn(cpu *Core) {
	v := int(int8(cpu.Memory.ReadByte(cpu.Registers.PC)))
	cpu.Registers.PC++

	if !cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
		return
	}

	cpu.Registers.PC = uint16(int(cpu.Registers.PC) + v)

	cpu.Registers.LastClockM = 3
	cpu.Registers.LastClockT = 12
}

func gbStop(cpu *Core) {
	cpu.stopped = true
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbCALLnn(cpu *Core) {
	cpu.Registers.SP -= 2
	cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
	cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

	cpu.Registers.LastClockM = 6
	cpu.Registers.LastClockT = 24
}

func gbCALLNZnn(cpu *Core) {
	if cpu.Registers.GetZero() {
		cpu.Registers.PC += 2
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
	} else {
		cpu.Registers.SP -= 2
		cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

		cpu.Registers.LastClockM = 6
		cpu.Registers.LastClockT = 24
	}
}

func gbCALLZnn(cpu *Core) {
	if !cpu.Registers.GetZero() {
		cpu.Registers.PC += 2
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
	} else {
		cpu.Registers.SP -= 2
		cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

		cpu.Registers.LastClockM = 6
		cpu.Registers.LastClockT = 24
	}
}

func gbCALLNCnn(cpu *Core) {
	if cpu.Registers.GetCarry() {
		cpu.Registers.PC += 2
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
	} else {
		cpu.Registers.SP -= 2
		cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

		cpu.Registers.LastClockM = 6
		cpu.Registers.LastClockT = 24
	}
}

func gbCALLCnn(cpu *Core) {
	if !cpu.Registers.GetCarry() {
		cpu.Registers.PC += 2
		cpu.Registers.LastClockM = 3
		cpu.Registers.LastClockT = 12
	} else {
		cpu.Registers.SP -= 2
		cpu.Memory.WriteWord(cpu.Registers.SP, cpu.Registers.PC+2)
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.PC)

		cpu.Registers.LastClockM = 6
		cpu.Registers.LastClockT = 24
	}
}

func gbRET(cpu *Core) {
	cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
	cpu.Registers.SP += 2

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

func gbRETI(cpu *Core) {
	cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
	cpu.Registers.SP += 2
	cpu.Registers.InterruptEnable = true

	cpu.Registers.LastClockM = 4
	cpu.Registers.LastClockT = 16
}

func gbRETNZ(cpu *Core) {
	if cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
		cpu.Registers.SP += 2

		cpu.Registers.LastClockM = 5
		cpu.Registers.LastClockT = 20
	}
}
func gbRETZ(cpu *Core) {
	if !cpu.Registers.GetZero() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
		cpu.Registers.SP += 2

		cpu.Registers.LastClockM = 5
		cpu.Registers.LastClockT = 20
	}
}

func gbRETNC(cpu *Core) {
	if cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
		cpu.Registers.SP += 2

		cpu.Registers.LastClockM = 5
		cpu.Registers.LastClockT = 20
	}
}

func gbRETC(cpu *Core) {
	if !cpu.Registers.GetCarry() {
		cpu.Registers.LastClockM = 2
		cpu.Registers.LastClockT = 8
	} else {
		cpu.Registers.PC = cpu.Memory.ReadWord(cpu.Registers.SP)
		cpu.Registers.SP += 2

		cpu.Registers.LastClockM = 5
		cpu.Registers.LastClockT = 20
	}
}

func gbDI(cpu *Core) {
	cpu.Registers.InterruptEnable = false
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbEI(cpu *Core) {
	cpu.Registers.InterruptEnable = true
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbNOP(cpu *Core) {
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

func gbNOPWARN(cpu *Core, opcode int) {
	cpuLog.Warn("Opcode not implemented: 0x%02x at 0x%04x", opcode, cpu.Registers.PC-1)
	cpu.Registers.LastClockM = 0
	cpu.Registers.LastClockT = 0
	cpu.paused = true
}

func gbHALT(cpu *Core) {
	cpu.halted = true
	cpu.Registers.LastClockM = 1
	cpu.Registers.LastClockT = 4
}

// endregion

var GBInstructions = []GBInstruction{
	// region 0x00 Group
	gbNOP,
	gbLDBCnn,
	gbLDBCmA,
	gbINCBC,
	gbINCrB,
	gbDECrB,
	gbLDrnB,
	gbRLCA,
	gbLDmmSP,
	gbADDHLBC,
	gbLDABCm,
	gbDECBC,
	gbINCrC,
	gbDECrC,
	gbLDrnC,
	gbRRCA,
	// endregion
	// region 0x10 Group
	gbStop,
	gbLDDEnn,
	gbLDDEmA,
	gbINCDE,
	gbINCrD,
	gbDECrD,
	gbLDrnD,
	gbRLA,
	gbJRn,
	gbADDHLDE,
	gbLDADEm,
	gbDECDE,
	gbINCrE,
	gbDECrE,
	gbLDrnE,
	gbRRA,
	// endregion
	// region 0x20 Group
	gbJRNZn,
	gbLDHLnn,
	gbLDHLIA,
	gbINCHL,
	gbINCrH,
	gbDECrH,
	gbLDrnH,
	gbDAA,
	gbJRZn,
	gbADDHLHL,
	gbLDAHLI,
	gbDECHL,
	gbINCrL,
	gbDECrL,
	gbLDrnL,
	gbCPL,
	// endregion
	// region 0x30 Group
	gbJRNCn,
	gbLDSPnn,
	gbLDHLDA,
	gbINCSP,
	gbINCHLm,
	gbDECHLm,
	gbLDHLmn,
	gbSCF,
	gbJRCn,
	gbADDHLSP,
	gbLDAHLD,
	gbDECSP,
	gbINCrA,
	gbDECrA,
	gbLDrnA,
	gbCCF,
	// endregion
	// region 0x40 Group
	gbLDrrBB,
	gbLDrrBC,
	gbLDrrBD,
	gbLDrrBE,
	gbLDrrBH,
	gbLDrrBL,
	gbLDrHLmB,
	gbLDrrBA,
	gbLDrrCB,
	gbLDrrCC,
	gbLDrrCD,
	gbLDrrCE,
	gbLDrrCH,
	gbLDrrCL,
	gbLDrHLmC,
	gbLDrrCA,
	// endregion
	// region 0x50 Group
	gbLDrrDB,
	gbLDrrDC,
	gbLDrrDD,
	gbLDrrDE,
	gbLDrrDH,
	gbLDrrDL,
	gbLDrHLmD,
	gbLDrrDA,
	gbLDrrEB,
	gbLDrrEC,
	gbLDrrED,
	gbLDrrEE,
	gbLDrrEH,
	gbLDrrEL,
	gbLDrHLmE,
	gbLDrrEA,
	// endregion
	// region 0x60 Group
	gbLDrrHB,
	gbLDrrHC,
	gbLDrrHD,
	gbLDrrHE,
	gbLDrrHH,
	gbLDrrHL,
	gbLDrHLmH,
	gbLDrrHA,
	gbLDrrLB,
	gbLDrrLC,
	gbLDrrLD,
	gbLDrrLE,
	gbLDrrLH,
	gbLDrrLL,
	gbLDrHLmL,
	gbLDrrLA,
	// endregion
	// region 0x70 Group
	gbLDHLmrB,
	gbLDHLmrC,
	gbLDHLmrD,
	gbLDHLmrE,
	gbLDHLmrH,
	gbLDHLmrL,
	gbHALT,
	gbLDHLmrA,
	gbLDrrAB,
	gbLDrrAC,
	gbLDrrAD,
	gbLDrrAE,
	gbLDrrAH,
	gbLDrrAL,
	gbLDrHLmA,
	gbLDrrAA,
	// endregion
	// region 0x80 Group
	gbADDrB,
	gbADDrC,
	gbADDrD,
	gbADDrE,
	gbADDrH,
	gbADDrL,
	gbADDHL,
	gbADDrA,
	gbADCrB,
	gbADCrC,
	gbADCrD,
	gbADCrE,
	gbADCrH,
	gbADCrL,
	gbADCHL,
	gbADCrA,
	// endregion
	// region 0x90 Group
	gbSUBrB,
	gbSUBrC,
	gbSUBrD,
	gbSUBrE,
	gbSUBrH,
	gbSUBrL,
	gbSUBHL,
	gbSUBrA,
	gbSBCrB,
	gbSBCrC,
	gbSBCrD,
	gbSBCrE,
	gbSBCrH,
	gbSBCrL,
	gbSBCHL,
	gbSBCrA,
	// endregion
	// region 0xA0 Group
	gbANDrB,
	gbANDrC,
	gbANDrD,
	gbANDrE,
	gbANDrH,
	gbANDrL,
	gbANDHL,
	gbANDrA,
	gbXORrB,
	gbXORrC,
	gbXORrD,
	gbXORrE,
	gbXORrH,
	gbXORrL,
	gbXORHL,
	gbXORrA,
	// endregion
	// region 0xB0 Group
	gbORrB,
	gbORrC,
	gbORrD,
	gbORrE,
	gbORrH,
	gbORrL,
	gbORHL,
	gbORrA,
	gbCPrB,
	gbCPrC,
	gbCPrD,
	gbCPrE,
	gbCPrH,
	gbCPrL,
	gbCPHL,
	gbCPrA,
	// endregion
	// region 0xC0 Group
	gbRETNZ,
	gbPOPBC,
	gbJPNZnn,
	gbJPnn,
	gbCALLNZnn,
	gbPUSHBC,
	gbADDn,
	func(cpu *Core) { gbRSTXX(cpu, 0x00) },
	gbRETZ,
	gbRET,
	gbJPZnn,
	gbCBCall,
	gbCALLZnn,
	gbCALLnn,
	gbADCn,
	func(cpu *Core) { gbRSTXX(cpu, 0x08) },
	// endregion
	// region 0xD0 Group
	gbRETNC,
	gbPOPDE,
	gbJPNCnn,
	func(cpu *Core) { gbNOPWARN(cpu, 0xD3) },
	gbCALLNCnn,
	gbPUSHDE,
	gbSUBn,
	func(cpu *Core) { gbRSTXX(cpu, 0x10) },
	gbRETC,
	gbRETI,
	gbJPCnn,
	func(cpu *Core) { gbNOPWARN(cpu, 0xDB) },
	gbCALLCnn,
	func(cpu *Core) { gbNOPWARN(cpu, 0xDD) },
	gbSBCn,
	func(cpu *Core) { gbRSTXX(cpu, 0x18) },
	// endregion
	// region 0xE0 Group
	gbLDIOnA,
	gbPOPHL,
	gbLDIOCA,
	func(cpu *Core) { gbNOPWARN(cpu, 0xE3) },
	func(cpu *Core) { gbNOPWARN(cpu, 0xE4) },
	gbPUSHHL,
	gbANDn,
	func(cpu *Core) { gbRSTXX(cpu, 0x20) },
	gbADDSPn,
	gbJPHL,
	gbLDmmA,
	func(cpu *Core) { gbNOPWARN(cpu, 0xEB) },
	func(cpu *Core) { gbNOPWARN(cpu, 0xEC) },
	func(cpu *Core) { gbNOPWARN(cpu, 0xED) },
	gbXORn,
	func(cpu *Core) { gbRSTXX(cpu, 0x28) },
	// endregion
	// region 0xF0 Group
	gbLDAIOn,
	gbPOPAF,
	gbLDAIOC,
	gbDI,
	func(cpu *Core) { gbNOPWARN(cpu, 0xF4) },
	gbPUSHAF,
	gbORn,
	func(cpu *Core) { gbRSTXX(cpu, 0x30) },
	gbLDHLSPn,
	gbLDHLSPr,
	gbLDAmm,
	gbEI,
	func(cpu *Core) { gbNOPWARN(cpu, 0xFC) },
	func(cpu *Core) { gbNOPWARN(cpu, 0xFD) },
	gbCPn,
	func(cpu *Core) { gbRSTXX(cpu, 0x38) },
	// endregion
}
