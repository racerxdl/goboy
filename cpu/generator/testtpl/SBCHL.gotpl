        // region 0x{{.OpCodeX}} Test {{.Instruction}}
        
        func TestSBCHLm(t *testing.T) {
            cpu := MakeCore()
            
            // Console.WriteLine("Testing (0x{{.OpCodeX}}) \"{{.Instruction}}\"")
            for i := 0; i < RunCycles; i++ {
                cpu.Reset()
                cpu.Registers.Randomize()
                cpu.Memory.Randomize()

                // Force write to Catridge Ram Random Address (avoid writting to non writeable addresses)

                cpu.Registers.H = 0xA0
                cpu.Registers.L = uint8( rand.Intn(0xFF))

                var val = uint8( rand.Intn(0xFF))

                cpu.Memory.WriteByte(cpu.Registers.HL(), val)

                RegBefore := cpu.Registers.Clone()
                GBInstructions[0x{{.OpCodeX}}](cpu)
                RegAfter := cpu.Registers.Clone()

                
                f := uint8(0)

                if RegBefore.GetCarry() {
                  f = 1
                }

                var sum = int(RegBefore.A) - int(val) - int(f)
                var halfCarry = (RegBefore.A & 0xF) < ((val & 0xF) + f)

                
                if uint8(sum & 0xFF) != (RegAfter.A) {
                    t.Errorf("Expected sum & 0xFF to be %v but got %v", sum & 0xFF, RegAfter.A)
                }
                
                if ((sum & 0xFF) == 0) != (RegAfter.GetZero()) {
                    t.Errorf("Expected (sum & 0xFF) == 0 to be %v but got %v", (sum & 0xFF) == 0, RegAfter.GetZero())
                }                

                if (sum < 0) != (RegAfter.GetCarry()) {
                    t.Errorf("Expected sum < 0 to be %v but got %v", sum < 0, RegAfter.GetCarry())
                }                

                if (halfCarry) != (RegAfter.GetHalfCarry()) {
                    t.Errorf("Expected halfCarry to be %v but got %v", halfCarry, RegAfter.GetHalfCarry())
                }

                {{.Asserts}}
                {{.Flags}}
            }
        }
        // endregion