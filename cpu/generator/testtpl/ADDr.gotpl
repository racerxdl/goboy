        // region 0x{{.OpCodeX}} Test {{.Instruction}}
        
        func TestADDr{{.Arg0}}(t *testing.T) {
            cpu := MakeCore()
            
            // Console.WriteLine("Testing (0x{{.OpCodeX}}) \"{{.Instruction}}\"")
            for i := 0; i < RunCycles; i++ {
                cpu.Reset()
                cpu.Registers.Randomize()
                cpu.Memory.Randomize()

                RegBefore := cpu.Registers.Clone()
                GBInstructions[0x{{.OpCodeX}}](cpu)
                RegAfter := cpu.Registers.Clone()

                var sum = uint16(RegBefore.A) + uint16(RegBefore.{{.Arg0}})
                var halfCarry = (uint8(sum) & 0xF) < (RegBefore.A & 0xF)

                if uint8(sum) != RegAfter.A {
                    t.Errorf("Expected uint8(sum) != RegAfter.A to be %v but got %v", false, uint8(sum) != RegAfter.A)
                }

                if "{{.Arg0}}" != "A" {
                    if RegBefore.{{.Arg0}} != RegAfter.{{.Arg0}} {
                        t.Errorf("Expected RegBefore.{{.Arg0}} != RegAfter.{{.Arg0}} to be %v but got %v", false, uint8(sum) != RegAfter.A)
                    }
                }

               
                if (sum > 255) != (RegAfter.GetCarry()) {
                    t.Errorf("Expected sum > 255 to be %v but got %v", sum > 255, RegAfter.GetCarry())
                }                
                if ((sum & 0xFF) == 0) != (RegAfter.GetZero()) {
                    t.Errorf("Expected (sum & 0xFF) == 0 to be %v but got %v", (sum & 0xFF) == 0, RegAfter.GetZero())
                }                
                if (halfCarry) != (RegAfter.GetHalfCarry()) {
                    t.Errorf("Expected halfCarry to be %v but got %v", halfCarry, RegAfter.GetHalfCarry())
                }
                {{.Asserts}}
                {{.Flags}}
            }
        }
        // endregion