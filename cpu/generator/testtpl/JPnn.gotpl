        // region 0x{{.OpCodeX}} Test {{.Instruction}}
        
        func TestJPnn(t *testing.T) {
            cpu := MakeCore()
            
            // Console.WriteLine("Testing (0x{{.OpCodeX}}) \"{{.Instruction}}\"")
            for i := 0; i < RunCycles; i++ {
                cpu.Reset()
                cpu.Registers.Randomize()
                cpu.Memory.Randomize()

                cpu.Registers.PC = uint16( ((0xA1 << 8) + rand.Intn(0xF0)))

                var valA = uint16( rand.Intn(0xFFFF))

                cpu.Memory.WriteWord(cpu.Registers.PC, valA)

                // RegBefore := cpu.Registers.Clone()
                GBInstructions[0x{{.OpCodeX}}](cpu)
                RegAfter := cpu.Registers.Clone()

                
                if (valA) != (RegAfter.PC) {
                    t.Errorf("Expected valA to be %v but got %v", valA, RegAfter.PC)
                }
                {{.Asserts}}
                {{.Flags}}
            }
        }
        // endregion