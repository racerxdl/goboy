        // region 0x{{.OpCodeX}} Test {{.Instruction}}
        
        func TestLDIOnA(t *testing.T) {
            cpu := MakeCore()
            
            // Console.WriteLine("Testing (0x{{.OpCodeX}}) \"{{.Instruction}}\"")
            for i := 0; i < RunCycles; i++ {
                cpu.Reset()
                cpu.Registers.Randomize()
                cpu.Memory.Randomize()

                // Force write to Catridge Ram Random Address (avoid writting to non writeable addresses)
                cpu.Registers.PC = uint16( ((0xA0 << 8) + uint16( rand.Intn(0xFF))))

                cpu.Memory.WriteByte(cpu.Registers.PC, 0x80)

                RegBefore := cpu.Registers.Clone()
                GBInstructions[0x{{.OpCodeX}}](cpu)
                RegAfter := cpu.Registers.Clone()

                
                if (RegBefore.A) != (cpu.Memory.ReadByte(0xFF80)) {
                    t.Errorf("Expected RegBefore.A to be %v but got %v", RegBefore.A, cpu.Memory.ReadByte(0xFF80))
                }                
                if (RegBefore.PC + 1) != (RegAfter.PC) {
                    t.Errorf("Expected RegBefore.PC + 1 to be %v but got %v", RegBefore.PC + 1, RegAfter.PC)
                }
                {{.Asserts}}
                {{.Flags}}
            }
        }
        // endregion