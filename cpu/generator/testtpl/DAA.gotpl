        // region 0x{{.OpCodeX}} Test {{.Instruction}}
        
        func TestDAA(t *testing.T) {
            cpu := MakeCore()
            
            // Console.WriteLine("Testing (0x{{.OpCodeX}}) \"{{.Instruction}}\"")
            for i := 0; i < RunCycles; i++ {
                cpu.Reset()
                cpu.Registers.Randomize()
                cpu.Memory.Randomize()

                RegBefore := cpu.Registers.Clone()
                GBInstructions[0x{{.OpCodeX}}](cpu)
                RegAfter := cpu.Registers.Clone()

                correction := int(0)
                a := int(RegBefore.A)

                if RegBefore.GetCarry() {
                    correction = 0x60
                }

                if RegBefore.GetHalfCarry() || (!RegBefore.GetSub() && ((a & 0x0F) > 9)) {
                    correction |= 0x06
                }

                if RegBefore.GetCarry() || (!RegBefore.GetSub() && (a > 0x99)) {
                    correction |= 0x60
                }

                if RegBefore.GetSub() {
                    a -= correction
                } else {
                    a += correction
                }

                expectedA := uint8(a)
                expectedZero := expectedA == 0
                expectedCarry := RegBefore.GetCarry()

                if (correction<<2)&0x100 != 0 {
                    expectedCarry = true
                }

                
                if (expectedCarry) != (RegAfter.GetCarry()) {
                    t.Errorf("Expected carry to be %v but got %v", expectedCarry, RegAfter.GetCarry())
                }                
                if (expectedZero) != (RegAfter.GetZero()) {
                    t.Errorf("Expected zero to be %v but got %v", expectedZero, RegAfter.GetZero())
                }                
                if expectedA != (RegAfter.A) {
                    t.Errorf("Expected a & 0xFF to be %v but got %v", expectedA & 0xFF, RegAfter.A)
                }
                {{.Asserts}}
                {{.Flags}}
            }
        }
        // endregion