        // region 0x{{.OpCodeX}} Test {{.Instruction}}
        
        func TestADDHLSP(t *testing.T) {
            cpu := MakeCore()
            
            // Console.WriteLine("Testing (0x{{.OpCodeX}}) \"{{.Instruction}}\"")
            for i := 0; i < RunCycles; i++ {
                cpu.Reset()
                cpu.Registers.Randomize()
                cpu.Memory.Randomize()

                RegBefore := cpu.Registers.Clone()
                GBInstructions[0x{{.OpCodeX}}](cpu)
                RegAfter := cpu.Registers.Clone()

                var sum = RegBefore.HL() + RegBefore.SP
                var halfCarry = (RegBefore.HL() & 0xFFF) + (RegBefore.SP & 0xFFF) > 0xFFF

                
                if (sum & 0xFFFF) != (RegAfter.HL()) {
                    t.Errorf("Expected sum & 0xFFFF to be %v but got %v", sum & 0xFFFF, RegAfter.HL())
                }                
                if (sum > 65535) != (RegAfter.GetCarry()) {
                    t.Errorf("Expected sum > 65535 to be %v but got %v", sum > 65535, RegAfter.GetCarry())
                }                
                if (halfCarry) != (RegAfter.GetHalfCarry()) {
                    t.Errorf("Expected halfCarry to be %v but got %v", halfCarry, RegAfter.GetHalfCarry())
                }
                {{.Asserts}}
                {{.Flags}}
            }
        }
        // endregion